// Generated by CoffeeScript 2.5.1
(function() {
  angular.module('lmn.linbo', ['core', 'lmn.common', 'angular-sortable-view', 'colorpicker.module']);

}).call(this);

// Generated by CoffeeScript 2.5.1
(function() {
  var indexOf = [].indexOf;

  angular.module('lmn.linbo').config(function($routeProvider) {
    return $routeProvider.when('/view/lm/linbo', {
      controller: 'LMLINBOController',
      templateUrl: '/lmn_linbo:resources/partial/index.html'
    });
  });

  angular.module('lmn.linbo').controller('LMLINBOAcceptModalController', function($scope, $uibModalInstance, $http, partition, disk) {
    $scope.partition = partition;
    $scope.disk = disk;
    $scope.save = function() {
      return $uibModalInstance.close({
        response: 'accept'
      });
    };
    return $scope.close = function() {
      return $uibModalInstance.dismiss();
    };
  });

  angular.module('lmn.linbo').controller('LMLINBOPartitionModalController', function($scope, $uibModalInstance, $http, partition, os) {
    $scope.partition = partition;
    $scope.os = os;
    $http.get('/api/lm/linbo/icons').then(function(resp) {
      $scope.icons = resp.data;
      $scope.image_extension = 'svg';
      // Test if common svg picture is there, and fallback to png if not
      if (resp.data.indexOf('ubuntu.svg') < 0) {
        $scope.image_extension = 'png';
      }
      $scope.show_png_warning = false;
      if ($scope.image_extension === 'svg' && os.IconName.endsWith('png')) {
        return $scope.show_png_warning = true;
      }
    });
    $http.get('/api/lm/linbo/images').then(function(resp) {
      var i, len, oses, results;
      $scope.images = [];
      $scope.diffImages = [];
      oses = resp.data;
      results = [];
      for (i = 0, len = oses.length; i < len; i++) {
        os = oses[i];
        if (os.cloop) {
          $scope.images.push(os.name);
        }
        if (os.rsync) {
          results.push($scope.diffImages.push(os.name));
        } else {
          results.push(void 0);
        }
      }
      return results;
    });
    $scope.save = function() {
      return $uibModalInstance.close({
        partition: $scope.partition,
        os: $scope.os
      });
    };
    return $scope.close = function() {
      return $uibModalInstance.dismiss();
    };
  });

  angular.module('lmn.linbo').controller('LMLINBOImageModalController', function($scope, $uibModal, $uibModalInstance, $http, gettext, filesystem, messagebox, image, images) {
    var x;
    $scope.image = image;
    $scope.imagesWithReg = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = images.length; i < len; i++) {
        x = images[i];
        if (x.reg) {
          results.push(x);
        }
      }
      return results;
    })();
    $scope.imagesWithPostsync = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = images.length; i < len; i++) {
        x = images[i];
        if (x.postsync) {
          results.push(x);
        }
      }
      return results;
    })();
    $scope.imagesWithPrestart = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = images.length; i < len; i++) {
        x = images[i];
        if (x.prestart) {
          results.push(x);
        }
      }
      return results;
    })();
    $http.get('/api/lm/linbo/examples-regs').then(function(resp) {
      return $scope.exampleRegs = resp.data;
    });
    $scope.setExampleReg = function(name) {
      return filesystem.read(`/srv/linbo/examples/${name}`).then(function(content) {
        return $scope.image.reg = content;
      });
    };
    $http.get('/api/lm/linbo/examples-postsyncs').then(function(resp) {
      return $scope.examplePostsyncs = resp.data;
    });
    $http.get('/api/lm/linbo/examples-prestart').then(function(resp) {
      return $scope.examplePrestarts = resp.data;
    });
    $scope.setExamplePostsync = function(name) {
      return filesystem.read(`/srv/linbo/examples/${name}`).then(function(content) {
        return $scope.image.postsync = content;
      });
    };
    $scope.setExamplePrestart = function(name) {
      return filesystem.read(`/srv/linbo/examples/${name}`).then(function(content) {
        return $scope.image.prestart = content;
      });
    };
    $scope.save = function() {
      return $uibModalInstance.close(image);
    };
    return $scope.close = function() {
      return $uibModalInstance.dismiss();
    };
  });

  angular.module('lmn.linbo').controller('LMLINBOConfigModalController', function($scope, $uibModal, $uibModalInstance, $timeout, $http, $log, gettext, messagebox, config, lmFileBackups, identity, vdiconfig) {
    var DiskType, _device, _partition, disk, diskMap, i, j, len, len1, ref, ref1;
    $scope.config = config;
    $scope.vdiconfig = vdiconfig;
    $scope.expert = false;
    $scope.privateConf = false;
    if (config.config.LINBO.School !== 'default-school') {
      $scope.privateConf = true;
    }
    $scope.togglePrivateConf = function() {
      if ($scope.privateConf) {
        $scope.privateConf = false;
        return config.config.LINBO.School = 'default-school';
      } else {
        $scope.privateConf = true;
        return config.config.LINBO.School = $scope.identity.profile.activeSchool;
      }
    };
    $scope.toggleExpert = function() {
      if ($scope.expert) {
        return $scope.expert = false;
      } else {
        return $scope.expert = true;
      }
    };
    if ($scope.config.config.LINBO.BackgroundColor) {
      $scope.config.config.LINBO.BackgroundColor = '#' + $scope.config.config.LINBO.BackgroundColor;
    }
    $scope.kernelOptions = ['quiet', 'splash', 'acpi=noirq', 'acpi=off', 'irqpoll', 'dhcpretry=9'];
    $scope.colors = ['white', 'black', 'lightCyan', 'cyan', 'darkCyan', 'orange', 'red', 'darkRed', 'pink', 'magenta', 'darkMagenta', 'lightGreen', 'green', 'darkGreen', 'lightYellow', 'yellow', 'gold', 'lightBlue', 'blue', 'darkBlue', 'lightGray', 'gray', 'darkGray'];
    $scope.disks = [];
    diskMap = {};
    $http.get('/api/lm/linbo/images').then(function(resp) {
      return $scope.oses = resp.data;
    });
    ref = config.partitions;
    for (i = 0, len = ref.length; i < len; i++) {
      _partition = ref[i];
      // Determine the position of the partition integer.
      // Different devices have it on a different position
      if (_partition['Dev'].indexOf("nvme") !== -1) {
        _device = _partition.Dev.substring(0, '/dev/nvme0n1p'.length);
      }
      if (_partition['Dev'].indexOf("mmcblk") !== -1) {
        _device = _partition.Dev.substring(0, '/dev/mmcblk0p'.length);
      }
      if (_partition['Dev'].indexOf("sd") !== -1) {
        _device = _partition.Dev.substring(0, '/dev/sdX'.length);
      }
      if (!diskMap[_device]) {
        if (_device.indexOf("sd") !== -1) {
          DiskType = 'sata';
        }
        if (_device.indexOf("mmcblk") !== -1) {
          DiskType = 'mmc';
        }
        if (_device.indexOf("nvme") !== -1) {
          DiskType = 'nvme';
        }
        diskMap[_device] = {
          name: _device,
          partitions: [],
          DiskType: DiskType
        };
        $scope.disks.push(diskMap[_device]);
      }
      diskMap[_device].partitions.push(_partition);
      _partition._isCache = _partition.Dev === config.config.LINBO.Cache;
    }
    ref1 = $scope.disks;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      disk = ref1[j];
      disk.partitions.sort(function(a, b) {
        if (a.Dev > b.Dev) {
          return 1;
        } else {
          return -1;
        }
      });
    }
    $scope.getAllInfo = function() {
      console.log($scope.disks);
      console.log($scope.config);
      return console.log($scope.diskMap);
    };
    $scope.updateDiskType = function(disk) {
      var newDiskType, oldDiskName;
      oldDiskName = disk.name;
      newDiskType = disk.DiskType;
      if (newDiskType === 'sata') {
        disk.name = 'a';
        while (true) {
          if (diskMap[`/dev/sd${disk.name}`]) {
            disk.name = String.fromCharCode(disk.name.charCodeAt(0) + 1);
            continue;
          }
          break;
        }
        disk.name = `/dev/sd${disk.name}`;
        console.log(disk.name);
      }
      if (newDiskType === 'mmc') {
        disk.name = '0';
        while (true) {
          if (diskMap[`/dev/mmcblk${disk.name}p`]) {
            disk.name = String.fromCharCode(disk.name.charCodeAt(0) + 1);
            continue;
          }
          break;
        }
        disk.name = `/dev/mmcblk${disk.name}p`;
        console.log(disk.name);
      }
      if (newDiskType === 'nvme') {
        disk.name = '0';
        while (true) {
          if (diskMap[`/dev/nvme${disk.name}n1p`]) {
            disk.name = String.fromCharCode(disk.name.charCodeAt(0) + 1);
            continue;
          }
          break;
        }
        disk.name = `/dev/nvme${disk.name}n1p`;
        console.log(disk.name);
      }
      //diskMap
      $scope.rebuildDisks();
      // create new object with the actual diskname
      diskMap[disk.name] = disk;
      // remove the old diskname
      return delete diskMap[oldDiskName];
    };
    $scope.addDisk = function() {
      disk = 'a';
      while (true) {
        if (diskMap[`/dev/sd${disk}`]) {
          disk = String.fromCharCode(disk.charCodeAt(0) + 1);
          continue;
        }
        break;
      }
      disk = `/dev/sd${disk}`;
      diskMap[disk] = {
        name: disk,
        partitions: [],
        DiskType: 'sata'
      };
      return $scope.disks.push(diskMap[disk]);
    };
    $scope.removeDisk = function(disk) {
      delete diskMap[disk.name];
      return $scope.disks.remove(disk);
    };
    $scope.getSize = function(partition) {
      var ps, s;
      if (!partition.Size || !partition.Size.toLowerCase) {
        return;
      }
      ps = partition.Size.toLowerCase();
      s = parseInt(ps) * 1024;
      if (ps[ps.length - 1] === 'm') {
        s *= 1024;
      }
      if (ps[ps.length - 1] === 'g') {
        s *= 1024 * 1024;
      }
      if (ps[ps.length - 1] === 't') {
        s *= 1024 * 1024 * 1024;
      }
      return s;
    };
    $scope.isSwapPartition = function(partition) {
      return partition.FSType === 'swap';
    };
    $scope.isCachePartition = function(partition) {
      return partition.Dev === config.config.LINBO.Cache;
    };
    $scope.getOS = function(partition) {
      var k, len2, os, ref2;
      ref2 = config.os;
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        os = ref2[k];
        if (os.Root === partition.Dev) {
          return os;
        }
      }
      return null;
    };
    $scope.getName = function(partition) {
      if ($scope.getOS(partition) && $scope.getOS(partition).Name) {
        return $scope.getOS(partition).Name;
      }
      if (partition.Label) {
        return partition.Label;
      }
      if ($scope.isSwapPartition(partition)) {
        return gettext('Swap');
      }
      if (partition._isCache) {
        return gettext('LINBO Cache');
      }
      if (partition.Id === 'ef') {
        return 'EFI';
      }
      if (partition.Id === '0c01') {
        return 'MSR';
      }
      if (partition.Label) {
        return partition.Label;
      }
      return 'Partition';
    };
    $scope.addSwap = function(disk) {
      disk.partitions.push({
        Bootable: false,
        FSType: 'swap',
        Id: '82',
        Size: '4G',
        Label: ''
      });
      return $scope.rebuildDisks();
    };
    $scope.addData = function(disk) {
      disk.partitions.push({
        Bootable: false,
        FSType: 'ntfs',
        Id: '7',
        Size: '10G',
        Label: ''
      });
      return $scope.rebuildDisks();
    };
    $scope.addEFI = function(disk) {
      disk.partitions.splice(0, 0, {
        Bootable: true,
        FSType: 'vfat',
        Id: 'ef',
        Size: 1024 * 200,
        Label: ''
      });
      return $scope.rebuildDisks();
    };
    $scope.addMSR = function(disk) {
      disk.partitions.splice(1, 0, {
        Bootable: false,
        FSType: '',
        Id: '0c01',
        Size: 1024 * 128,
        Label: ''
      });
      return $scope.rebuildDisks();
    };
    $scope.addExtended = function(disk) {
      disk.partitions.push({
        Bootable: false,
        FSType: '',
        Id: '5',
        Size: '',
        Label: ''
      });
      return $scope.rebuildDisks();
    };
    $scope.addCache = function(disk) {
      disk.partitions.push({
        Bootable: true,
        FSType: 'ext4',
        Id: '83',
        Size: '',
        Label: '',
        _isCache: true
      });
      return $scope.rebuildDisks();
    };
    $scope.addWindows = function(disk) {
      var partition;
      partition = {
        Bootable: true,
        FSType: 'ntfs',
        Id: '7',
        Size: '40G',
        Label: ''
      };
      disk.partitions.push(partition);
      $scope.rebuildDisks();
      return $scope.config.os.push({
        Name: 'Windows 10',
        Version: '',
        Description: 'Windows 10',
        IconName: 'win10.' + $scope.image_extension,
        Image: '',
        BaseImage: '',
        Root: partition.Dev,
        Boot: partition.Dev,
        Kernel: 'auto',
        Initrd: '',
        Append: '',
        StartEnabled: true,
        SyncEnabled: true,
        NewEnabled: true,
        Hidden: true,
        Autostart: false,
        AutostartTimeout: 5,
        DefaultAction: 'sync'
      });
    };
    $scope.addLinux = function(disk) {
      var partition;
      partition = {
        Bootable: true,
        FSType: 'ext4',
        Id: '83',
        Size: '20G',
        Label: ''
      };
      disk.partitions.push(partition);
      $scope.rebuildDisks();
      return $scope.config.os.push({
        Name: 'Ubuntu',
        Version: '',
        Description: 'Ubuntu 16.04',
        IconName: 'ubuntu.' + $scope.image_extension,
        Image: '',
        BaseImage: '',
        Root: partition.Dev,
        Boot: partition.Dev,
        Kernel: 'vmlinuz',
        Initrd: 'initrd.img',
        Append: 'ro splash',
        StartEnabled: true,
        SyncEnabled: true,
        NewEnabled: true,
        Hidden: true,
        Autostart: false,
        AutostartTimeout: 5,
        DefaultAction: 'sync'
      });
    };
    $scope.removePartition = function(partition, disk) {
      return $uibModal.open({
        templateUrl: '/lmn_linbo:resources/partial/accept.modal.html',
        controller: 'LMLINBOAcceptModalController',
        resolve: {
          partition: function() {
            return angular.copy(partition.Dev);
          },
          disk: function() {
            return angular.copy(disk);
          }
        }
      }).result.then(function(result) {
        if (result.response === 'accept') {
          disk.partitions.remove(partition);
          return $scope.rebuildDisks();
        }
      });
    };
    $scope.rebuildDisks = function() {
      var k, l, len2, len3, len4, m, newDev, os, partition, partitionIndex, ref2, ref3, ref4, remap, results;
      remap = {};
      ref2 = $scope.disks;
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        disk = ref2[k];
        partitionIndex = 1;
        ref3 = disk.partitions;
        for (l = 0, len3 = ref3.length; l < len3; l++) {
          partition = ref3[l];
          newDev = `${disk.name}${partitionIndex}`;
          if (partition.Dev) {
            remap[partition.Dev] = newDev;
          }
          partition.Dev = newDev;
          partitionIndex++;
          if (partition._isCache) {
            config.config.LINBO.Cache = partition.Dev;
          }
        }
      }
      $log.log('Remapping OSes', remap);
      ref4 = config.os;
      results = [];
      for (m = 0, len4 = ref4.length; m < len4; m++) {
        os = ref4[m];
        if (os.Boot) {
          os.Boot = remap[os.Boot];
        }
        if (os.Root) {
          results.push(os.Root = remap[os.Root]);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    $scope.getBorderColor = function(partition) {
      if ($scope.isCachePartition(partition)) {
        return '#F3E000';
      }
      if ($scope.isSwapPartition(partition)) {
        return '#E09305';
      }
      if (partition.Id === 'ef') {
        return '#737373';
      }
      if (partition.Id === '0c01') {
        return '#737373';
      }
      if ($scope.getOS(partition)) {
        return '#3232B7';
      }
      return '#58B158';
    };
    $scope.addKernelOption = function(option) {
      return $scope.config.config.LINBO.KernelOptions += ' ' + option;
    };
    $scope.editPartition = function(partition) {
      var os;
      os = $scope.getOS(partition);
      return $uibModal.open({
        templateUrl: '/lmn_linbo:resources/partial/partition.modal.html',
        controller: 'LMLINBOPartitionModalController',
        resolve: {
          partition: function() {
            return angular.copy(partition);
          },
          os: function() {
            return angular.copy(os);
          }
        }
      }).result.then(function(result) {
        angular.copy(result.partition, partition);
        if (os) {
          angular.copy(result.os, os);
        }
        return $scope.rebuildDisks();
      });
    };
    $scope.save = function() {
      var k, l, len2, len3, partition, ref2, ref3;
      console.log(vdiconfig);
      config.partitions = [];
      ref2 = $scope.disks;
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        disk = ref2[k];
        ref3 = disk.partitions;
        for (l = 0, len3 = ref3.length; l < len3; l++) {
          partition = ref3[l];
          config.partitions.push(partition);
        }
      }
      $uibModalInstance.close([config, vdiconfig]);
      
      // Remove # from background color
      if ($scope.config.config.LINBO.BackgroundColor) {
        $scope.config.config.LINBO.BackgroundColor = $scope.config.config.LINBO.BackgroundColor.substring(1);
      }
      return $uibModalInstance.close(config);
    };
    $scope.backups = function() {
      return lmFileBackups.show('/srv/linbo/start.conf.' + $scope.config.config.LINBO.Group).then(function() {
        return $uibModalInstance.dismiss();
      });
    };
    return $scope.close = function() {
      return $uibModalInstance.dismiss();
    };
  });

  angular.module('lmn.linbo').controller('LMLINBOController', function($q, $scope, $http, $uibModal, $log, $route, $location, gettext, notify, pageTitle, tasks, messagebox, validation, identity) {
    var tag;
    pageTitle.set(gettext('LINBO'));
    $scope.tabs = ['groups', 'images'];
    tag = $location.$$url.split("#")[1];
    if (tag && indexOf.call($scope.tabs, tag) >= 0) {
      $scope.activetab = $scope.tabs.indexOf(tag);
    } else {
      $scope.activetab = 0;
    }
    $scope.images_selected = [];
    $http.get('/api/lm/linbo/configs').then(function(resp) {
      var allConfigNames, configName, i, len, results;
      $scope.configs = [];
      // TODO: Better rework to work in backend
      allConfigNames = resp.data;
      results = [];
      for (i = 0, len = allConfigNames.length; i < len; i++) {
        configName = allConfigNames[i];
        results.push($http.get(`/api/lm/linbo/config/${configName}`).then(function(resp) {
          var ref;
          if (!('School' in resp.data['config']['LINBO'])) {
            return $scope.configs.push('start.conf.' + resp.data['config']['LINBO']['Group']);
          } else {
            if ((ref = resp.data['config']['LINBO']['School']) === identity.profile.activeSchool || ref === 'default-school') {
              return $scope.configs.push('start.conf.' + resp.data['config']['LINBO']['Group']);
            }
          }
        }));
      }
      return results;
    });
    $http.get('/api/lm/linbo/examples').then(function(resp) {
      return $scope.examples = resp.data;
    });
    $http.get('/api/lm/linbo/images').then(function(resp) {
      return $scope.images = resp.data;
    });
    $scope.createConfig = function(example) {
      return messagebox.prompt('New name', '').then(function(msg) {
        var newName, ref, test;
        newName = msg.value;
        test = validation.isValidLinboConf(newName);
        if (test !== true) {
          notify.error(gettext(test));
          return;
        }
        if (newName) {
          if (ref = "start.conf." + newName, indexOf.call($scope.configs, ref) >= 0) {
            notify.error(gettext('A config file with this name already exists!'));
            return;
          }
          if (example) {
            return $http.get(`/api/lm/linbo/config/examples/${example}`).then(function(resp) {
              resp.data['config']['LINBO']['Group'] = newName;
              return $http.get("/api/lm/read-config-setup").then(function(setup) {
                resp.data['config']['LINBO']['Server'] = setup.data['setup']['serverip'];
                return $http.post(`/api/lm/linbo/config/start.conf.${newName}`, resp.data).then(function() {
                  return $route.reload();
                });
              });
            });
          } else {
            return $http.post(`/api/lm/linbo/config/start.conf.${newName}`, {
              config: {
                LINBO: {
                  Group: newName
                }
              },
              os: [],
              partitions: []
            }).then(function() {
              return $route.reload();
            });
          }
        }
      });
    };
    $scope.deleteConfig = function(configName) {
      return messagebox.show({
        text: `Delete '${configName}'?`,
        positive: 'Delete',
        negative: 'Cancel'
      }).then(function() {
        return $http.delete(`/api/lm/linbo/config/${configName}`).then(function() {
          return $route.reload();
        });
      });
    };
    $scope.duplicateConfig = function(configName) {
      var newName;
      newName = configName.substring('start.conf.'.length);
      return messagebox.prompt('New name', newName).then(function(msg) {
        newName = msg.value;
        if (newName) {
          return $http.get(`/api/lm/linbo/config/${configName}`).then(function(resp) {
            resp.data.config.LINBO.Group = newName;
            return $http.post(`/api/lm/linbo/config/start.conf.${newName}`, resp.data).then(function() {
              return $route.reload();
            });
          });
        }
      });
    };
    $scope.editConfig = function(configName) {
      return $http.get(`/api/lm/linbo/config/${configName}`).then(function(resp) {
        var config;
        config = resp.data;
        return $http.get(`/api/lm/linbo/vdi/${configName}.vdi`).then(function(resp) {
          var vdiconfig;
          vdiconfig = resp.data;
          return $uibModal.open({
            templateUrl: '/lmn_linbo:resources/partial/config.modal.html',
            controller: 'LMLINBOConfigModalController',
            size: 'lg',
            resolve: {
              config: function() {
                return config;
              },
              vdiconfig: function() {
                return vdiconfig;
              }
            }
          }).result.then(function(result) {
            $http.post(`/api/lm/linbo/config/${configName}`, result[0]).then(function(resp) {
              return notify.success(gettext('Saved'));
            });
            return $http.post(`/api/lm/linbo/vdi/${configName}.vdi`, result[1]).then(function(resp) {
              return notify.success(gettext('Saved'));
            });
          });
        });
      });
    };
    $scope.deleteImage = function(image) {
      return messagebox.show({
        text: `Delete '${image.name}'?`,
        positive: 'Delete',
        negative: 'Cancel'
      }).then(function() {
        return $http.delete(`/api/lm/linbo/image/${image.name}`).then(function() {
          $location.hash("images");
          return $route.reload();
        });
      });
    };
    $scope.deleteImages = function() {
      var image, name_list;
      name_list = ((function() {
        var i, len, ref, results;
        ref = $scope.images_selected;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          image = ref[i];
          results.push(image.name);
        }
        return results;
      })()).toString();
      return messagebox.show({
        text: `Delete '${name_list}'?`,
        positive: 'Delete',
        negative: 'Cancel'
      }).then(function() {
        var i, len, promises, ref;
        promises = [];
        ref = $scope.images_selected;
        for (i = 0, len = ref.length; i < len; i++) {
          image = ref[i];
          promises.push($http.delete(`/api/lm/linbo/image/${image.name}`));
        }
        return $q.all(promises).then(function() {
          $location.hash("images");
          return $route.reload();
        });
      });
    };
    $scope.toggleSelected = function(image) {
      var position;
      position = $scope.images_selected.indexOf(image);
      if (position > -1) {
        return $scope.images_selected.splice(position, 1);
      } else {
        return $scope.images_selected.push(image);
      }
    };
    $scope.duplicateImage = function(image) {
      return messagebox.prompt('New name', image.name).then(function(msg) {
        var newFileName, newName;
        newName = msg.value;
        if (newName) {
          newFileName = newName;
          if (!newFileName.endsWith('.cloop') && !newFileName.endsWith('.rsync')) {
            newFileName += image.cloop ? '.cloop' : '.rsync';
          }
          tasks.start('aj.plugins.filesystem.tasks.Transfer', [], {
            destination: `/srv/linbo/${newFileName}`,
            items: [
              {
                mode: 'copy',
                item: {
                  name: image.name,
                  path: `/srv/linbo/${image.name}`
                }
              }
            ]
          });
          image = angular.copy(image);
          image.name = newFileName;
          return $http.post(`/api/lm/linbo/image/${image.name}`, image).then(function() {
            return $scope.images.push(image);
          });
        }
      });
    };
    $scope.editImage = function(image) {
      return $uibModal.open({
        templateUrl: '/lmn_linbo:resources/partial/image.modal.html',
        controller: 'LMLINBOImageModalController',
        resolve: {
          image: function() {
            return angular.copy(image);
          },
          images: function() {
            return $scope.images;
          }
        }
      }).result.then(function(result) {
        angular.copy(result, image);
        return $http.post(`/api/lm/linbo/image/${image.name}`, result).then(function(resp) {
          return notify.success(gettext('Saved'));
        });
      });
    };
    $scope.downloadIso = function() {
      return location.href = '/api/lm/linbo.iso';
    };
    $scope.$watch('identity.user', function() {
      if ($scope.identity.user === void 0) {
        return;
      }
      if ($scope.identity.user === null) {
        return;
      }
      if ($scope.identity.user === 'root') {

      }
    });
    return $http.get("/api/lmn/activeschool").then(function(resp) {
      var school;
      $scope.identity.profile.activeSchool = resp.data;
      return school = $scope.identity.profile.activeSchool;
    });
  });

}).call(this);

