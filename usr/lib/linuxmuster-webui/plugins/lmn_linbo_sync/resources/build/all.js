'use strict';

angular.module('lmn.linbo_sync', ['core', 'lmn.common']);


'use strict';

angular.module('lmn.linbo_sync').config(function ($routeProvider) {
    $routeProvider.when('/view/lmn/linbo_sync', {
        templateUrl: '/lmn_linbo_sync:resources/partial/index.html',
        controller: 'SyncIndexController'
    });
});


// Generated by CoffeeScript 2.5.1
(function() {
  angular.module('lmn.linbo_sync').controller('SyncIndexController', function($scope, $http, $interval, $timeout, notify, pageTitle, messagebox, gettext) {
    pageTitle.set(gettext('Linbo synchronization'));
    $http.get("/api/lmn/activeschool").then(function(resp) {
      $scope.school = resp.data;
      if ($scope.school === 'default-school') {
        return $scope.linbo_remote = '/usr/sbin/linbo-remote';
      } else {
        return $scope.linbo_remote = '/usr/sbin/linbo-remote -s ' + $scope.school;
      }
    });
    $http.get("/api/lmn/linbosync/last_syncs").then(function(resp) {
      var group, results;
      $scope.groups = resp.data;
      $scope.linbo_command = {};
      results = [];
      for (group in $scope.groups) {
        results.push($scope.linbo_command[group] = {
          'cmd': [],
          'cmd_parameters': [],
          'show': false,
          'host': [],
          'target': 'clients'
        });
      }
      return results;
    });
    $scope.up_icons = {
      'Off': "fas fa-power-off",
      'No response': "fas fa-power-off",
      'OS Linux': "fab fa-linux",
      'OS Windows': "fab fa-windows",
      'Linbo': "fas fa-laptop-medical"
    };
    $scope.isUp = function(group, host) {
      var index;
      index = $scope.groups[group].hosts.indexOf(host);
      return $http.get(`/api/lmn/linbosync/isOnline/${host.hostname}`).then(function(resp) {
        $scope.groups[group].hosts[index].up_comment = resp.data;
        $scope.groups[group].hosts[index].up_icon = $scope.up_icons[resp.data];
        if (resp.data === "Off" || resp.data === "No response") {
          return $scope.groups[group].hosts[index].upClass = "btn-danger";
        } else {
          return $scope.groups[group].hosts[index].upClass = "btn-success";
        }
      });
    };
    $scope.checkOnline = function(group) {
      var host, i, len, ref, results;
      ref = $scope.groups[group].hosts;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        host = ref[i];
        results.push($scope.isUp(group, host));
      }
      return results;
    };
    $scope.clientIsInCmd = function(group, ip) {
      return $scope.linbo_command[group]['host'].indexOf(ip) > -1 || $scope.linbo_command[group]['target'] === 'group';
    };
    $scope.update_host = function(group, ip) {
      var host, i, len, position, ref;
      if (group === ip) {
        $scope.linbo_command[group]['host'] = [];
        if ($scope.linbo_command[group]['target'] === 'clients') {
          ref = $scope.groups[group].hosts;
          for (i = 0, len = ref.length; i < len; i++) {
            host = ref[i];
            $scope.linbo_command[group]['host'].push(host.ip);
          }
          $scope.linbo_command[group]['target'] = 'group';
        } else {
          $scope.linbo_command[group]['target'] = 'clients';
        }
      } else {
        $scope.linbo_command[group]['target'] = 'clients';
        position = $scope.linbo_command[group]['host'].indexOf(ip);
        if (position < 0) {
          $scope.linbo_command[group]['host'].push(ip);
        } else {
          $scope.linbo_command[group]['host'].splice(position, 1);
        }
      }
      return $scope.refresh_cmd(group);
    };
    $scope.handle_sync = function(group, os, value) {
      // Possible values : new, sync or 0
      if (value === 'new') {
        os.run_format = !os.run_format;
      } else {
        os.run_format = 0;
      }
      if (os.run_sync === value) {
        os.run_sync = 0;
      } else {
        os.run_sync = value;
      }
      return $scope.refresh_cmd(group);
    };
    $scope.handle_partition = function(group) {
      // Possible values : 1 or 0
      $scope.groups[group]['auto']['partition'] = 1 - $scope.groups[group]['auto']['partition'];
      return $scope.refresh_cmd(group);
    };
    $scope.handle_format = function(group, os, value) {
      // Possible values : 1 or 0
      if (os.run_format === value) {
        os.run_format = 0;
      } else {
        os.run_format = value;
      }
      return $scope.refresh_cmd(group);
    };
    $scope.handle_start = function(group, os, value) {
      var i, len, osloop, ref;
      // Possible values : start or 0
      if (os.run_start === value) {
        os.run_start = 0;
      } else {
        os.run_start = value;
      }
      ref = $scope.groups[group]['os'];
      // Only one start possible
      for (i = 0, len = ref.length; i < len; i++) {
        osloop = ref[i];
        if (osloop.baseimage !== os.baseimage) {
          osloop.run_start = 0;
        }
      }
      return $scope.refresh_cmd(group);
    };
    $scope.handle_power = function(group, value) {
      // Possible values : halt, reboot or 0
      if ($scope.groups[group]['power']['halt'] === value) {
        $scope.groups[group]['power']['halt'] = 0;
      } else {
        $scope.groups[group]['power']['halt'] = value;
      }
      return $scope.refresh_cmd(group);
    };
    $scope.handle_bypass = function(group) {
      // Possible values : 0 or 1
      // Bypass start.conf
      $scope.groups[group]['auto']['bypass'] = 1 - $scope.groups[group]['auto']['bypass'];
      return $scope.refresh_cmd(group);
    };
    $scope.handle_disable_gui = function(group) {
      // Possible values : 0 or 1
      $scope.groups[group]['auto']['disable_gui'] = 1 - $scope.groups[group]['auto']['disable_gui'];
      return $scope.refresh_cmd(group);
    };
    $scope.handle_wake_on_lan = function(group) {
      // Possible values : 0 or 1
      $scope.groups[group]['auto']['wol'] = 1 - $scope.groups[group]['auto']['wol'];
      return $scope.refresh_cmd(group);
    };
    $scope.handle_prestart = function(group) {
      // Possible values : 0 or 1
      $scope.groups[group]['auto']['prestart'] = 1 - $scope.groups[group]['auto']['prestart'];
      return $scope.refresh_cmd(group);
    };
    $scope.refresh_cmd = function(group) {
      var autostart, cmd, cmd_parameters, format, i, index, ip, j, len, len1, os, ref, ref1, start, sync, timeout;
      cmd_parameters = {
        'target': {
          'type': '',
          'host': ''
        },
        'timeout': 0,
        'prestart': false,
        'disable_gui': false,
        'bypass': false,
        'partition': false,
        'actions': {
          'format': [],
          'sync': [],
          'start': []
        },
        'acpi': ''
      };
      format = [];
      sync = [];
      start = [];
      if ($scope.groups[group]['auto']['prestart'] > 0) {
        cmd = ' -p ';
        cmd_parameters['prestart'] = true;
      } else {
        cmd = ' -c ';
      }
      if ($scope.groups[group]['auto']['partition'] > 0) {
        cmd += ' partition,format';
        cmd_parameters['partition'] = true;
      }
      ref = $scope.groups[group]['os'];
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        os = ref[index];
        os.position = index + 1;
        // First format
        if (os.run_format) {
          format.push('format:' + os.partition);
          cmd_parameters['actions']['format'].push(os.partition);
        }
        // Then sync or new ( not both )
        if (os.run_sync) {
          sync.push('sync:' + os.position);
          cmd_parameters['actions']['sync'].push(os.position);
        }
        // A little start, but only one
        if (os.run_start) {
          start.push('start:' + os.position);
          cmd_parameters['actions']['start'].push(os.position);
        }
      }
      if (format.length > 0) {
        cmd += cmd.length > 4 ? ',' + format.join() : format.join();
      }
      if (sync.length > 0) {
        cmd += cmd.length > 4 ? ',' + sync.join() : sync.join();
      }
      if (start.length > 0) {
        cmd += cmd.length > 4 ? ',' + start.join() : start.join();
      }
      // Power is the key, but without start ...
      if ($scope.groups[group]['power']['halt']) {
        cmd += cmd.length > 4 ? ',' + $scope.groups[group]['power']['halt'] : $scope.groups[group]['power']['halt'];
        cmd_parameters['acpi'] = $scope.groups[group]['power']['halt'];
      }
      timeout = '';
      if ($scope.groups[group]['auto']['wol'] > 0) {
        timeout = ' -w ' + $scope.groups[group]['power']['timeout'];
        cmd_parameters['timeout'] = $scope.groups[group]['power']['timeout'];
      }
      autostart = '';
      if ($scope.groups[group]['auto']['disable_gui'] > 0) {
        autostart += ' -d ';
        cmd_parameters['disable_gui'] = true;
      }
      if ($scope.groups[group]['auto']['bypass'] > 0 && timeout) {
        autostart += ' -n ';
        cmd_parameters['bypass'] = true;
      }
      // At least one command and one host selected
      if (cmd.length > 4 && $scope.linbo_command[group]['host'].length > 0) {
        // If target is a group or if all hosts are selected
        if ($scope.linbo_command[group]['target'] === 'group' || $scope.linbo_command[group]['host'].length === $scope.groups[group].hosts.length) {
          $scope.linbo_command[group]['target'] = 'group';
          $scope.linbo_command[group]['cmd'] = [$scope.linbo_remote + ' -g ' + group + timeout + autostart + cmd];
          cmd_parameters['target']['type'] = 'group';
          cmd_parameters['target']['host'] = group;
          $scope.linbo_command[group]['cmd_parameters'] = [cmd_parameters];
        } else {
          $scope.linbo_command[group]['cmd'] = [];
          $scope.linbo_command[group]['cmd_parameters'] = [];
          ref1 = $scope.linbo_command[group]['host'];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            ip = ref1[j];
            $scope.linbo_command[group]['cmd'].push($scope.linbo_remote + ' -i ' + ip + timeout + autostart + cmd);
            cmd_parameters['target']['type'] = 'host';
            cmd_parameters['target']['host'] = ip;
            $scope.linbo_command[group]['cmd_parameters'].push(angular.copy(cmd_parameters));
          }
        }
        return $scope.linbo_command[group]['show'] = true;
      } else {
        $scope.linbo_command[group]['cmd'] = '';
        $scope.linbo_command[group]['cmd_parameters'] = [];
        return $scope.linbo_command[group]['show'] = false;
      }
    };
    return $scope.run = function(group) {
      var cmd_parameters, i, len, ref, results;
      ref = $scope.linbo_command[group]['cmd_parameters'];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        cmd_parameters = ref[i];
        results.push($http.post("/api/lmn/linbosync/run", {
          cmd_parameters: cmd_parameters
        }).then(function(resp) {
          if (resp.data['status'] === 1) {
            return notify.error(resp.data['msg']);
          } else {
            return notify.success(gettext('Command successfully sent: ' + resp.data['msg']));
          }
        }));
      }
      return results;
    };
  });

}).call(this);

