// Generated by CoffeeScript 2.5.1
(function() {
  angular.module('lmn.users', ['core', 'lmn.common']);

}).call(this);

// Generated by CoffeeScript 2.5.1
(function() {
  angular.module('lmn.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lmn/users/teachers', {
      controller: 'LMUsersTeachersController',
      templateUrl: '/lmn_users:resources/partial/teachers.html'
    });
  });

  angular.module('lmn.users').controller('LMUsersTeachersController', function($q, $scope, $http, $location, $route, $uibModal, $sce, gettext, notify, messagebox, pageTitle, customFields, userPassword) {
    pageTitle.set(gettext('Teachers'));
    $scope.sorts = [
      {
        name: gettext('First name'),
        fx: function(x) {
          return x.givenName;
        }
      },
      {
        name: gettext('Last name'),
        fx: function(x) {
          return x.sn;
        }
      },
      {
        name: gettext('Login'),
        fx: function(x) {
          return x.sAMAccountName;
        }
      },
      {
        name: gettext('Birthday'),
        fx: function(x) {
          return x.sophomorixBirthdate;
        }
      },
      {
        name: gettext('Status'),
        fx: function(x) {
          return x.sophomorixStatus.tag;
        }
      }
    ];
    $scope.sort = $scope.sorts[0];
    $scope.paging = {
      page: 1,
      pageSize: 50
    };
    $scope.all_selected = false;
    $scope.query = '';
    $http.get('/api/lmn/sophomorixUsers/teachers').then(function(resp) {
      return $scope.teachers = resp.data;
    });
    customFields.load_display('teachers').then(function(resp) {
      $scope.customDisplay = resp['customDisplay'];
      return $scope.customTitle = resp['customTitle'];
    });
    $scope.isListAttr = function(attr) {
      return customFields.isListAttr(attr);
    };
    $scope.teachersQuota = false;
    $scope.getQuotas = function() {
      var i, len, promises, t, teacher, teacherList;
      teacherList = (function() {
        var i, len, ref, results;
        ref = $scope.teachers;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          t = ref[i];
          results.push(t.sAMAccountName);
        }
        return results;
      })();
      promises = [];
      for (i = 0, len = teacherList.length; i < len; i++) {
        teacher = teacherList[i];
        promises.push($http.get(`/api/lmn/quota/usermap/${teacher}`));
      }
      return $q.all(promises).then(function(resp) {
        var j, len1, login, results;
        $scope.teachersQuota = {};
        results = [];
        for (j = 0, len1 = resp.length; j < len1; j++) {
          teacher = resp[j];
          login = Object.keys(teacher.data)[0];
          results.push($scope.teachersQuota[login] = teacher.data[login]);
        }
        return results;
      });
    };
    $scope.showFirstPassword = function(username) {
      $scope.blurred = true;
      return userPassword.showFirstPassword(username).then(function(resp) {
        return $scope.blurred = false;
      });
    };
    $scope.resetFirstPassword = userPassword.resetFirstPassword;
    $scope.setRandomFirstPassword = userPassword.setRandomFirstPassword;
    $scope.setCustomPassword = userPassword.setCustomPassword;
    $scope.batchResetFirstPassword = function() {
      return userPassword.batchPasswords($scope.teachers, 'reset-first');
    };
    $scope.batchSetRandomFirstPassword = function() {
      return userPassword.batchPasswords($scope.teachers, 'random-first');
    };
    $scope.batchSetCustomFirstPassword = function() {
      return userPassword.batchPasswords($scope.teachers, 'custom-first');
    };
    $scope.printSelectedPasswords = function() {
      return userPassword.printSelectedPasswords($scope.teachers);
    };
    $scope.userInfo = function(user) {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/userDetails.modal.html',
        controller: 'LMNUserDetailsController',
        size: 'lg',
        resolve: {
          id: function() {
            return user[0]['sAMAccountName'];
          },
          role: function() {
            return 'teachers';
          }
        }
      }).closed.then(function() {
        return $route.reload();
      });
    };
    $scope.haveSelection = function() {
      var i, len, ref, x;
      if ($scope.teachers) {
        ref = $scope.teachers;
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            return true;
          }
        }
      }
      return false;
    };
    $scope.filter = function(row) {
      var i, len, ref, result, value;
      // Only query sAMAccountName, givenName and sn
      result = false;
      ref = ['sAMAccountName', 'givenName', 'sn'];
      for (i = 0, len = ref.length; i < len; i++) {
        value = ref[i];
        if (row[value] !== void 0) {
          result = result || row[value].toLowerCase().indexOf($scope.query.toLowerCase() || '') !== -1;
        }
      }
      return result;
    };
    return $scope.selectAll = function(query) {
      var i, len, ref, results, teacher;
      if (query == null) {
        query = '';
      }
      ref = $scope.teachers;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        teacher = ref[i];
        if (query === void 0 || query === '') {
          teacher.selected = $scope.all_selected;
        }
        if (teacher.sn.toLowerCase().includes(query.toLowerCase())) {
          teacher.selected = $scope.all_selected;
        }
        if (teacher.givenName.toLowerCase().includes(query.toLowerCase())) {
          teacher.selected = $scope.all_selected;
        }
        if (teacher.sophomorixAdminClass.toLowerCase().includes(query.toLowerCase())) {
          teacher.selected = $scope.all_selected;
        }
        if (teacher.sAMAccountName.toLowerCase().includes(query.toLowerCase())) {
          results.push(teacher.selected = $scope.all_selected);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
  });

}).call(this);

// Generated by CoffeeScript 2.5.1
(function() {
  angular.module('lmn.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lmn/users/students', {
      controller: 'LMUsersStudentsController',
      templateUrl: '/lmn_users:resources/partial/students.html'
    });
  });

  angular.module('lmn.users').controller('LMUsersStudentsController', function($scope, $http, $location, $route, $uibModal, gettext, notify, messagebox, pageTitle, customFields, userPassword) {
    pageTitle.set(gettext('Students'));
    $scope.sorts = [
      {
        name: gettext('Class'),
        fx: function(x) {
          return x.sophomorixAdminClass;
        }
      },
      {
        name: gettext('First name'),
        fx: function(x) {
          return x.givenName;
        }
      },
      {
        name: gettext('Last name'),
        fx: function(x) {
          return x.sn;
        }
      },
      {
        name: gettext('Birthday'),
        fx: function(x) {
          return x.sophomorixBirthdate;
        }
      },
      {
        name: gettext('Status'),
        fx: function(x) {
          return x.sophomorixStatus.tag;
        }
      }
    ];
    $scope.sort = $scope.sorts[0];
    $scope.paging = {
      page: 1,
      pageSize: 50
    };
    $scope.all_selected = false;
    $scope.query = '';
    customFields.load_display('students').then(function(resp) {
      $scope.customDisplay = resp['customDisplay'];
      return $scope.customTitle = resp['customTitle'];
    });
    $scope.isListAttr = function(attr) {
      return customFields.isListAttr(attr);
    };
    $http.get('/api/lmn/sophomorixUsers/students').then(function(resp) {
      return $scope.students = resp.data;
    });
    $scope.showFirstPassword = function(username) {
      $scope.blurred = true;
      return userPassword.showFirstPassword(username).then(function(resp) {
        return $scope.blurred = false;
      });
    };
    $scope.resetFirstPassword = userPassword.resetFirstPassword;
    $scope.setRandomFirstPassword = userPassword.setRandomFirstPassword;
    $scope.setCustomPassword = userPassword.setCustomPassword;
    $scope.batchResetFirstPassword = function() {
      return userPassword.batchPasswords($scope.students, 'reset-first');
    };
    $scope.batchSetRandomFirstPassword = function() {
      return userPassword.batchPasswords($scope.students, 'random-first');
    };
    $scope.batchSetCustomFirstPassword = function() {
      return userPassword.batchPasswords($scope.students, 'custom-first');
    };
    $scope.printSelectedPasswords = function() {
      return userPassword.printSelectedPasswords($scope.students);
    };
    $scope.userInfo = function(user) {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/userDetails.modal.html',
        controller: 'LMNUserDetailsController',
        size: 'lg',
        resolve: {
          id: function() {
            return user[0]['sAMAccountName'];
          },
          role: function() {
            return 'students';
          }
        }
      });
    };
    $scope.haveSelection = function() {
      var i, len, ref, x;
      if ($scope.students) {
        ref = $scope.students;
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            return true;
          }
        }
      }
      return false;
    };
    $scope.filter = function(row) {
      var i, len, ref, result, value;
      // Only query sAMAccountName, givenName, sn and sophomorixAdminClass
      result = false;
      ref = ['sAMAccountName', 'givenName', 'sn', 'sophomorixAdminClass'];
      for (i = 0, len = ref.length; i < len; i++) {
        value = ref[i];
        if (row[value] !== void 0) {
          result = result || row[value].toLowerCase().indexOf($scope.query.toLowerCase() || '') !== -1;
        }
      }
      return result;
    };
    return $scope.selectAll = function(query) {
      var i, len, ref, results, student;
      if (query == null) {
        query = '';
      }
      ref = $scope.students;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        student = ref[i];
        if (query === void 0 || query === '') {
          student.selected = $scope.all_selected;
        }
        if (student.sn.toLowerCase().includes(query.toLowerCase())) {
          student.selected = $scope.all_selected;
        }
        if (student.givenName.toLowerCase().includes(query.toLowerCase())) {
          student.selected = $scope.all_selected;
        }
        if (student.sophomorixAdminClass.toLowerCase().includes(query.toLowerCase())) {
          student.selected = $scope.all_selected;
        }
        if (student.sAMAccountName.toLowerCase().includes(query.toLowerCase())) {
          results.push(student.selected = $scope.all_selected);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
  });

}).call(this);

// Generated by CoffeeScript 2.5.1
(function() {
  angular.module('lmn.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lmn/users/schooladmins', {
      controller: 'LMUsersSchooladminsController',
      templateUrl: '/lmn_users:resources/partial/schooladmins.html'
    });
  });

  angular.module('lmn.users').controller('LMUsersSchooladminsController', function($scope, $http, $location, $route, $uibModal, gettext, notify, messagebox, pageTitle, customFields, userPassword) {
    pageTitle.set(gettext('Schooladmins'));
    $scope.sorts = [
      {
        name: gettext('Login'),
        fx: function(x) {
          return x.sAMAccountName;
        }
      }
    ];
    $scope.sort = $scope.sorts[0];
    $scope.paging = {
      page: 1,
      pageSize: 50
    };
    $scope.all_selected = false;
    $http.get('/api/lmn/sophomorixUsers/schooladmins').then(function(resp) {
      return $scope.schooladmins = resp.data;
    });
    customFields.load_display('schooladministrators').then(function(resp) {
      $scope.customDisplay = resp['customDisplay'];
      return $scope.customTitle = resp['customTitle'];
    });
    $scope.isListAttr = function(attr) {
      return customFields.isListAttr(attr);
    };
    $http.get('/api/lmn/sophomorixUsers/bindusers/school').then(function(resp) {
      return $scope.schoolbindusers = resp.data;
    });
    $scope.addSchoolBinduser = function() {
      return messagebox.prompt(gettext('Login for new school bind user'), '').then(function(msg) {
        // Filter chars ?
        return $http.post('/api/lmn/sophomorixUsers/bindusers/school', {
          binduser: msg.value
        }).then(function(resp) {
          notify.success(resp.data);
          return $route.reload();
        });
      });
    };
    $scope.deleteSchoolBinduser = function(user) {
      var x;
      return messagebox.show({
        title: gettext('Delete User'),
        text: gettext("Delete school bind user " + ((function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })()) + '?'),
        positive: 'Delete',
        negative: 'Cancel'
      }).then(function() {
        return $http.patch('/api/lmn/sophomorixUsers/schooladmins', {
          users: (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = user.length; i < len; i++) {
              x = user[i];
              results.push(x['sAMAccountName']);
            }
            return results;
          })()
        }).then(function(resp) {
          $route.reload();
          return notify.success(gettext('User deleted'));
        });
      });
    };
    $scope.showBindPW = userPassword.showBindPW;
    $scope.showFirstPassword = function(username) {
      $scope.blurred = true;
      return userPassword.showFirstPassword(username).then(function(resp) {
        return $scope.blurred = false;
      });
    };
    $scope.resetFirstPassword = userPassword.resetFirstPassword;
    $scope.setRandomFirstPassword = userPassword.setRandomFirstPassword;
    $scope.setCustomPassword = userPassword.setCustomPassword;
    $scope.batchResetFirstPassword = function() {
      return userPassword.batchPasswords($scope.schooladmins, 'reset-first');
    };
    $scope.batchSetRandomFirstPassword = function() {
      return userPassword.batchPasswords($scope.schooladmins, 'random-first');
    };
    $scope.batchSetCustomFirstPassword = function() {
      return userPassword.batchPasswords($scope.schooladmins, 'custom-first');
    };
    $scope.deleteSchoolAdmin = function(user) {
      var x;
      return messagebox.show({
        title: gettext('Delete User'),
        text: gettext("Delete school-administrator " + ((function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })()) + '?'),
        positive: 'Delete',
        negative: 'Cancel'
      }).then(function() {
        return $http.patch('/api/lmn/sophomorixUsers/schooladmins', {
          users: (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = user.length; i < len; i++) {
              x = user[i];
              results.push(x['sAMAccountName']);
            }
            return results;
          })()
        }).then(function(resp) {
          $route.reload();
          return notify.success(gettext('User deleted'));
        });
      });
    };
    $scope.addSchoolAdmin = function() {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/addAdmin.modal.html',
        controller: 'LMNUsersAddAdminController',
        size: 'mg',
        resolve: {
          role: function() {
            return 'schooladmin';
          }
        }
      });
    };
    $scope.userInfo = function(user) {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/userDetails.modal.html',
        controller: 'LMNUserDetailsController',
        size: 'lg',
        resolve: {
          id: function() {
            return user[0]['sAMAccountName'];
          },
          role: function() {
            return 'schooladmins';
          }
        }
      }).closed.then(function() {
        return $route.reload();
      });
    };
    $scope.editComment = function(user) {
      return messagebox.prompt(gettext('Edit comment'), user.sophomorixComment).then(function(msg) {
        return $http.post(`/api/lmn/sophomorixUsers/${user.sAMAccountName}/comment`, {
          comment: msg.value
        }).then(function(resp) {
          return $route.reload();
        });
      });
    };
    $scope.haveSelection = function() {
      var i, len, ref, x;
      if ($scope.schooladmins) {
        ref = $scope.schooladmins;
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            return true;
          }
        }
      }
      return false;
    };
    return $scope.selectAll = function(filter) {
      var i, len, ref, results, schooladmin;
      if (filter == null) {
        filter = '';
      }
      ref = $scope.schooladmins;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        schooladmin = ref[i];
        if (filter === void 0 || filter === '') {
          schooladmin.selected = $scope.all_selected;
        }
        if (schooladmin.sn.toLowerCase().includes(filter.toLowerCase())) {
          schooladmin.selected = $scope.all_selected;
        }
        if (schooladmin.givenName.toLowerCase().includes(filter.toLowerCase())) {
          schooladmin.selected = $scope.all_selected;
        }
        if (schooladmin.sophomorixAdminClass.toLowerCase().includes(filter.toLowerCase())) {
          schooladmin.selected = $scope.all_selected;
        }
        if (schooladmin.sAMAccountName.toLowerCase().includes(filter.toLowerCase())) {
          results.push(schooladmin.selected = $scope.all_selected);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
  });

}).call(this);

// Generated by CoffeeScript 2.5.1
(function() {
  angular.module('lmn.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lmn/users/globaladmins', {
      controller: 'LMUsersGloballadminsController',
      templateUrl: '/lmn_users:resources/partial/globaladmins.html'
    });
  });

  angular.module('lmn.users').controller('LMUsersGloballadminsController', function($scope, $http, $location, $route, $uibModal, gettext, notify, messagebox, pageTitle, customFields, userPassword) {
    pageTitle.set(gettext('Globaladmins'));
    $scope.sorts = [
      {
        name: gettext('Login'),
        fx: function(x) {
          return x.sAMAccountName;
        }
      }
    ];
    $scope.sort = $scope.sorts[0];
    $scope.paging = {
      page: 1,
      pageSize: 50
    };
    $scope.all_selected = false;
    $http.get('/api/lmn/sophomorixUsers/globaladmins').then(function(resp) {
      return $scope.globaladmins = resp.data;
    });
    customFields.load_display('globaladministrators').then(function(resp) {
      $scope.customDisplay = resp['customDisplay'];
      return $scope.customTitle = resp['customTitle'];
    });
    $scope.isListAttr = function(attr) {
      return customFields.isListAttr(attr);
    };
    $http.get('/api/lmn/sophomorixUsers/bindusers/global').then(function(resp) {
      return $scope.globalbindusers = resp.data;
    });
    $scope.addGlobalBinduser = function() {
      return messagebox.prompt(gettext('Login for new global bind user'), '').then(function(msg) {
        // Filter chars ?
        return $http.post('/api/lmn/sophomorixUsers/bindusers/global', {
          binduser: msg.value
        }).then(function(resp) {
          notify.success(resp.data);
          return $route.reload();
        });
      });
    };
    $scope.deleteGlobalBinduser = function(user) {
      var x;
      return messagebox.show({
        title: gettext('Delete User'),
        text: gettext("Delete global bind user " + ((function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })()) + '?'),
        positive: 'Delete',
        negative: 'Cancel'
      }).then(function() {
        return $http.patch('/api/lmn/sophomorixUsers/globaladmins', {
          users: (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = user.length; i < len; i++) {
              x = user[i];
              results.push(x['sAMAccountName']);
            }
            return results;
          })()
        }).then(function(resp) {
          $route.reload();
          return notify.success(gettext('User deleted'));
        });
      });
    };
    $scope.showBindPW = userPassword.showBindPW;
    $scope.showFirstPassword = function(username) {
      $scope.blurred = true;
      return userPassword.showFirstPassword(username).then(function(resp) {
        return $scope.blurred = false;
      });
    };
    $scope.resetFirstPassword = userPassword.resetFirstPassword;
    $scope.setRandomFirstPassword = userPassword.setRandomFirstPassword;
    $scope.setCustomPassword = userPassword.setCustomPassword;
    $scope.batchResetFirstPassword = function() {
      return userPassword.batchPasswords($scope.globaladmins, 'reset-first');
    };
    $scope.batchSetRandomFirstPassword = function() {
      return userPassword.batchPasswords($scope.globaladmins, 'random-first');
    };
    $scope.batchSetCustomFirstPassword = function() {
      return userPassword.batchPasswords($scope.globaladmins, 'custom-first');
    };
    $scope.deleteGlobalAdmin = function(user) {
      var x;
      return messagebox.show({
        title: gettext('Delete User'),
        text: gettext("Delete global-administrator " + ((function() {
          var i, len, results;
          results = [];
          for (i = 0, len = user.length; i < len; i++) {
            x = user[i];
            results.push(x['sAMAccountName']);
          }
          return results;
        })()) + '?'),
        positive: 'Delete',
        negative: 'Cancel'
      }).then(function() {
        return $http.patch('/api/lmn/sophomorixUsers/globaladmins', {
          users: (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = user.length; i < len; i++) {
              x = user[i];
              results.push(x['sAMAccountName']);
            }
            return results;
          })()
        }).then(function(resp) {
          $route.reload();
          return notify.success(gettext('User deleted'));
        });
      });
    };
    $scope.addGlobalAdmin = function() {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/addAdmin.modal.html',
        controller: 'LMNUsersAddAdminController',
        size: 'mg',
        resolve: {
          role: function() {
            return 'globaladmin';
          }
        }
      });
    };
    $scope.userInfo = function(user) {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/userDetails.modal.html',
        controller: 'LMNUserDetailsController',
        size: 'lg',
        resolve: {
          id: function() {
            return user[0]['sAMAccountName'];
          },
          role: function() {
            return 'globaladmins';
          }
        }
      }).closed.then(function() {
        return $route.reload();
      });
    };
    $scope.editComment = function(user) {
      return messagebox.prompt(gettext('Edit comment'), user.sophomorixComment).then(function(msg) {
        return $http.post(`/api/lmn/sophomorixUsers/${user.sAMAccountName}/comment`, {
          comment: msg.value
        }).then(function(resp) {
          return $route.reload();
        });
      });
    };
    $scope.haveSelection = function() {
      var i, len, ref, x;
      if ($scope.globaladmins) {
        ref = $scope.globaladmins;
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            return true;
          }
        }
      }
      return false;
    };
    return $scope.selectAll = function(filter) {
      var globaladmin, i, len, ref, results;
      if (filter == null) {
        filter = '';
      }
      ref = $scope.globaladmins;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        globaladmin = ref[i];
        if (filter === void 0 || filter === '') {
          globaladmin.selected = $scope.all_selected;
        }
        if (globaladmin.sn.toLowerCase().includes(filter.toLowerCase())) {
          globaladmin.selected = $scope.all_selected;
        }
        if (globaladmin.givenName.toLowerCase().includes(filter.toLowerCase())) {
          globaladmin.selected = $scope.all_selected;
        }
        if (globaladmin.sophomorixAdminClass.toLowerCase().includes(filter.toLowerCase())) {
          globaladmin.selected = $scope.all_selected;
        }
        if (globaladmin.sAMAccountName.toLowerCase().includes(filter.toLowerCase())) {
          results.push(globaladmin.selected = $scope.all_selected);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
  });

}).call(this);

// Generated by CoffeeScript 2.5.1
(function() {
  angular.module('lmn.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lmn/users/extra-students', {
      controller: 'LMUsersExtraStudentsController',
      templateUrl: '/lmn_users:resources/partial/extra-students.html'
    });
  });

  angular.module('lmn.users').controller('LMUsersExtraStudentsController', function($scope, $http, $uibModal, $route, gettext, notify, pageTitle, lmEncodingMap, lmFileEditor, lmFileBackups, validation) {
    pageTitle.set(gettext('Extra Students'));
    $scope.sorts = [
      {
        name: gettext('Class'),
        fx: function(x) {
          return x.class;
        }
      },
      {
        name: gettext('First name'),
        fx: function(x) {
          return x.first_name;
        }
      },
      {
        name: gettext('Last name'),
        fx: function(x) {
          return x.last_name;
        }
      },
      {
        name: gettext('Birthday'),
        fx: function(x) {
          return x.birthday;
        }
      },
      {
        name: gettext('Login'),
        fx: function(x) {
          return x.login;
        }
      }
    ];
    $scope.sort = $scope.sorts[0];
    $scope.paging = {
      page: 1,
      pageSize: 100
    };
    $scope.first_save = false;
    $scope.validateField = function(name, val, isnew, filter = null) {
      var valid;
      // TODO : what valid chars for class, name and course ?
      // Temporary solution : not filter these fields
      if (name === 'TODO') {
        return "";
      }
      // TODO : is pasword necessary for extra course ? Filtered only if not undefined.
      // Desired passwords will be marked if not strong enough, is it necessary for extra courses ?
      if (name === 'Password' && !val) {
        return "";
      }
      valid = validation["isValid" + name](val) && val;
      if (filter === 'students') {
        valid = valid && ($scope.students.filter(validation.findval('login', val)).length < 2);
      }
      if (valid) {
        return "";
      }
      if (isnew && !$scope.first_save) {
        return "has-error-new";
      } else {
        return "has-error";
      }
    };
    $http.get('/api/lmn/schoolsettings').then(function(resp) {
      $scope.encoding = lmEncodingMap[resp.data.encoding_students_extra] || 'ISO8859-1';
      return $http.get(`/api/lmn/users/lists/extrastudents?encoding=${$scope.encoding}`).then(function(resp) {
        return $scope.students = resp.data;
      });
    });
    $scope.add = function() {
      if ($scope.students.length > 0) {
        $scope.paging.page = Math.floor(($scope.students.length - 1) / $scope.paging.pageSize) + 1;
      }
      return $scope.students.push({
        _isNew: true
      });
    };
    $scope.remove = function(student) {
      return $scope.students.remove(student);
    };
    $scope.editCSV = function() {
      return lmFileEditor.show('/etc/linuxmuster/sophomorix/default-school/extrastudents.csv', $scope.encoding).then(function() {
        return $route.reload();
      });
    };
    $scope.numErrors = function() {
      return document.getElementsByClassName("has-error").length + document.getElementsByClassName("has-error-new").length > 0;
    };
    $scope.save = function() {
      if ($scope.numErrors()) {
        $scope.first_save = true;
        angular.element(document.getElementsByClassName("has-error-new")).addClass('has-error');
        notify.error('Required data missing');
        return;
      }
      return $http.post(`/api/lmn/users/lists/extrastudents?encoding=${$scope.encoding}`, $scope.students).then(function() {
        return notify.success('Saved');
      });
    };
    $scope.saveAndCheck = function() {
      return $scope.save().then(function() {
        return $uibModal.open({
          templateUrl: '/lmn_users:resources/partial/check.modal.html',
          controller: 'LMUsersCheckModalController',
          backdrop: 'static'
        });
      });
    };
    return $scope.backups = function() {
      return lmFileBackups.show('/etc/linuxmuster/sophomorix/default-school/extrastudents.csv', $scope.encoding);
    };
  });

}).call(this);

// Generated by CoffeeScript 2.5.1
(function() {
  angular.module('lmn.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lmn/users/extra-courses', {
      controller: 'LMUsersExtraCoursesController',
      templateUrl: '/lmn_users:resources/partial/extra-courses.html'
    });
  });

  angular.module('lmn.users').controller('LMUsersExtraCoursesController', function($scope, $http, $uibModal, $route, notify, gettext, pageTitle, lmEncodingMap, lmFileEditor, lmFileBackups, validation) {
    pageTitle.set(gettext('Extra Courses'));
    $scope.sorts = [
      {
        name: gettext('Course'),
        fx: function(x) {
          return x.course;
        }
      },
      {
        name: gettext('Base name'),
        fx: function(x) {
          return x.base_name;
        }
      },
      {
        name: gettext('Birthday'),
        fx: function(x) {
          return x.birthday;
        }
      },
      {
        name: gettext('Count'),
        fx: function(x) {
          return x.count;
        }
      },
      {
        name: gettext('GECOS'),
        fx: function(x) {
          return x.gecos;
        }
      }
    ];
    $scope.sort = $scope.sorts[0];
    $scope.paging = {
      page: 1,
      pageSize: 100
    };
    $http.get('/api/lmn/schoolsettings').then(function(resp) {
      $scope.encoding = lmEncodingMap[resp.data.encoding_courses_extra] || 'ISO8859-1';
      return $http.get(`/api/lmn/users/lists/extraclasses?encoding=${$scope.encoding}`).then(function(resp) {
        return $scope.courses = resp.data;
      });
    });
    $scope.first_save = false;
    $scope.validateField = function(name, val, isnew, filter = null) {
      var valid;
      // TODO : what valid chars for class, name and course ?
      // Temporary solution : not filter these fields
      if (name === 'TODO') {
        return "";
      }
      // TODO : is pasword necessary for extra course ? Filtered only if not undefined.
      // Desired passwords will be marked if not strong enough, is it necessary for extra courses ?
      if (name === 'Password' && !val) {
        return "";
      }
      valid = validation["isValid" + name](val) && val;
      if (valid) {
        return "";
      }
      if (isnew && !$scope.first_save) {
        return "has-error-new";
      } else {
        return "has-error";
      }
    };
    $scope.add = function() {
      if ($scope.courses.length > 0) {
        $scope.paging.page = Math.floor(($scope.courses.length - 1) / $scope.paging.pageSize) + 1;
      }
      return $scope.courses.push({
        _isNew: true
      });
    };
    $scope.remove = function(course) {
      return $scope.courses.remove(course);
    };
    $scope.editCSV = function() {
      return lmFileEditor.show('/etc/linuxmuster/sophomorix/default-school/extraclasses.csv', $scope.encoding).then(function() {
        return $route.reload();
      });
    };
    $scope.numErrors = function() {
      return document.getElementsByClassName("has-error").length + document.getElementsByClassName("has-error-new").length > 0;
    };
    $scope.save = function() {
      if ($scope.numErrors()) {
        $scope.first_save = true;
        angular.element(document.getElementsByClassName("has-error-new")).addClass('has-error');
        notify.error('Required data missing');
        return;
      }
      return $http.post(`/api/lmn/users/lists/extraclasses?encoding=${$scope.encoding}`, $scope.courses).then(function() {
        return notify.success(gettext('Saved'));
      });
    };
    $scope.saveAndCheck = function() {
      return $scope.save().then(function() {
        return $uibModal.open({
          templateUrl: '/lmn_users:resources/partial/check.modal.html',
          controller: 'LMUsersCheckModalController',
          backdrop: 'static'
        });
      });
    };
    return $scope.backups = function() {
      return lmFileBackups.show('/etc/linuxmuster/sophomorix/default-school/extraclasses.csv', $scope.encoding);
    };
  });

}).call(this);

// Generated by CoffeeScript 2.5.1
(function() {
  angular.module('lmn.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lmn/users/teachers', {
      controller: 'LMUsersTeachersController',
      templateUrl: '/lmn_users:resources/partial/teachers.html'
    });
  });

  angular.module('lmn.users').controller('LMUsersTeachersController', function($q, $scope, $http, $location, $route, $uibModal, $sce, gettext, notify, messagebox, pageTitle, customFields, userPassword) {
    pageTitle.set(gettext('Teachers'));
    $scope.sorts = [
      {
        name: gettext('First name'),
        fx: function(x) {
          return x.givenName;
        }
      },
      {
        name: gettext('Last name'),
        fx: function(x) {
          return x.sn;
        }
      },
      {
        name: gettext('Login'),
        fx: function(x) {
          return x.sAMAccountName;
        }
      },
      {
        name: gettext('Birthday'),
        fx: function(x) {
          return x.sophomorixBirthdate;
        }
      },
      {
        name: gettext('Status'),
        fx: function(x) {
          return x.sophomorixStatus.tag;
        }
      }
    ];
    $scope.sort = $scope.sorts[0];
    $scope.paging = {
      page: 1,
      pageSize: 50
    };
    $scope.all_selected = false;
    $scope.query = '';
    $http.get('/api/lmn/sophomorixUsers/teachers').then(function(resp) {
      return $scope.teachers = resp.data;
    });
    customFields.load_display('teachers').then(function(resp) {
      $scope.customDisplay = resp['customDisplay'];
      return $scope.customTitle = resp['customTitle'];
    });
    $scope.isListAttr = function(attr) {
      return customFields.isListAttr(attr);
    };
    $scope.teachersQuota = false;
    $scope.getQuotas = function() {
      var i, len, promises, t, teacher, teacherList;
      teacherList = (function() {
        var i, len, ref, results;
        ref = $scope.teachers;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          t = ref[i];
          results.push(t.sAMAccountName);
        }
        return results;
      })();
      promises = [];
      for (i = 0, len = teacherList.length; i < len; i++) {
        teacher = teacherList[i];
        promises.push($http.get(`/api/lmn/quota/usermap/${teacher}`));
      }
      return $q.all(promises).then(function(resp) {
        var j, len1, login, results;
        $scope.teachersQuota = {};
        results = [];
        for (j = 0, len1 = resp.length; j < len1; j++) {
          teacher = resp[j];
          login = Object.keys(teacher.data)[0];
          results.push($scope.teachersQuota[login] = teacher.data[login]);
        }
        return results;
      });
    };
    $scope.showFirstPassword = function(username) {
      $scope.blurred = true;
      return userPassword.showFirstPassword(username).then(function(resp) {
        return $scope.blurred = false;
      });
    };
    $scope.resetFirstPassword = userPassword.resetFirstPassword;
    $scope.setRandomFirstPassword = userPassword.setRandomFirstPassword;
    $scope.setCustomPassword = userPassword.setCustomPassword;
    $scope.batchResetFirstPassword = function() {
      return userPassword.batchPasswords($scope.teachers, 'reset-first');
    };
    $scope.batchSetRandomFirstPassword = function() {
      return userPassword.batchPasswords($scope.teachers, 'random-first');
    };
    $scope.batchSetCustomFirstPassword = function() {
      return userPassword.batchPasswords($scope.teachers, 'custom-first');
    };
    $scope.printSelectedPasswords = function() {
      return userPassword.printSelectedPasswords($scope.teachers);
    };
    $scope.userInfo = function(user) {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/userDetails.modal.html',
        controller: 'LMNUserDetailsController',
        size: 'lg',
        resolve: {
          id: function() {
            return user[0]['sAMAccountName'];
          },
          role: function() {
            return 'teachers';
          }
        }
      }).closed.then(function() {
        return $route.reload();
      });
    };
    $scope.haveSelection = function() {
      var i, len, ref, x;
      if ($scope.teachers) {
        ref = $scope.teachers;
        for (i = 0, len = ref.length; i < len; i++) {
          x = ref[i];
          if (x.selected) {
            return true;
          }
        }
      }
      return false;
    };
    $scope.filter = function(row) {
      var i, len, ref, result, value;
      // Only query sAMAccountName, givenName and sn
      result = false;
      ref = ['sAMAccountName', 'givenName', 'sn'];
      for (i = 0, len = ref.length; i < len; i++) {
        value = ref[i];
        if (row[value] !== void 0) {
          result = result || row[value].toLowerCase().indexOf($scope.query.toLowerCase() || '') !== -1;
        }
      }
      return result;
    };
    return $scope.selectAll = function(query) {
      var i, len, ref, results, teacher;
      if (query == null) {
        query = '';
      }
      ref = $scope.teachers;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        teacher = ref[i];
        if (query === void 0 || query === '') {
          teacher.selected = $scope.all_selected;
        }
        if (teacher.sn.toLowerCase().includes(query.toLowerCase())) {
          teacher.selected = $scope.all_selected;
        }
        if (teacher.givenName.toLowerCase().includes(query.toLowerCase())) {
          teacher.selected = $scope.all_selected;
        }
        if (teacher.sophomorixAdminClass.toLowerCase().includes(query.toLowerCase())) {
          teacher.selected = $scope.all_selected;
        }
        if (teacher.sAMAccountName.toLowerCase().includes(query.toLowerCase())) {
          results.push(teacher.selected = $scope.all_selected);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
  });

}).call(this);

// Generated by CoffeeScript 2.5.1
(function() {
  var indexOf = [].indexOf;

  angular.module('lmn.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lmn/users/print-passwords', {
      controller: 'LMUsersPrintPasswordsController',
      templateUrl: '/lmn_users:resources/partial/print-passwords.html'
    });
  });

  angular.module('lmn.users').controller('LMUsersPrintPasswordsOptionsModalController', function($scope, $uibModalInstance, $http, notify, messagebox, gettext, schoolclass, user, adminClass, customFields) {
    $scope.options = {
      format: 'pdf',
      one_per_page: false,
      pdflatex: false,
      schoolclass: schoolclass,
      user: user,
      adminClass: adminClass,
      template_one_per_page: '',
      template_multiple: ''
    };
    if ($scope.options.user === 'root') {
      $scope.options.user = 'global-admin';
    }
    if ($scope.options.adminClass.includes('admins')) {
      $http.get('/api/lmn/schoolsettings/latex-templates').then(function(rp) {
        $scope.templates_individual = rp.data[0];
        $scope.templates_multiple = rp.data[1];
        $scope.options['template_one_per_page'] = $scope.templates_individual[0];
        $scope.options['template_multiple'] = $scope.templates_multiple[0];
        return customFields.load_config().then(function(resp) {
          var i, j, len, len1, ref, ref1, results, template;
          $scope.passwordTemplates = resp.passwordTemplates;
          ref = $scope.templates_individual;
          for (i = 0, len = ref.length; i < len; i++) {
            template = ref[i];
            if (template.path === $scope.passwordTemplates.individual) {
              $scope.options['template_one_per_page'] = template;
              break;
            }
          }
          ref1 = $scope.templates_multiple;
          results = [];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            template = ref1[j];
            if (template.path === $scope.passwordTemplates.multiple) {
              $scope.options['template_multiple'] = template;
              break;
            } else {
              results.push(void 0);
            }
          }
          return results;
        });
      });
    }
    $scope.title = schoolclass !== '' ? gettext("Class") + `: ${schoolclass.join(',')}` : gettext('All users ' + $scope.identity.profile.activeSchool);
    $scope.print = function() {
      var msg;
      msg = messagebox.show({
        progress: true
      });
      return $http.post('/api/lmn/users/print', $scope.options).then(function(resp) {
        var prefix;
        if (resp.data === 'success') {
          notify.success(gettext("Created password pdf"));
          if (schoolclass.length === 1) {
            prefix = 'add';
            if (schoolclass[0]) {
              prefix = schoolclass[0];
            }
          } else {
            prefix = 'multiclass';
          }
          location.href = `/api/lmn/users/passwords/download/${prefix}-${$scope.options.user}.${$scope.options.format}`;
        } else {
          notify.error(gettext("Could not create password pdf"));
        }
        return $uibModalInstance.close();
      }).finally(function() {
        return msg.close();
      });
    };
    return $scope.cancel = function() {
      return $uibModalInstance.dismiss();
    };
  });

  angular.module('lmn.users').controller('LMUsersPrintPasswordsController', function($scope, $http, $location, $route, $uibModal, gettext, notify, messagebox, pageTitle, lmFileEditor) {
    pageTitle.set(gettext('Print Passwords'));
    $scope.launch_print_modal = function(schoolclass) {
      if (indexOf.call($scope.selection, "") >= 0 && $scope.selection.length > 1) {
        notify.warning(gettext("It's not possible to print all users and a class at the same time."));
        return;
      }
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/print-passwords.options.modal.html',
        controller: 'LMUsersPrintPasswordsOptionsModalController',
        resolve: {
          schoolclass: function() {
            return schoolclass;
          },
          user: function() {
            return $scope.identity.user;
          },
          adminClass: function() {
            return $scope.adminClass;
          }
        }
      });
    };
    $scope.selection = [];
    $scope.select = function(schoolclass) {
      var position;
      position = $scope.selection.indexOf(schoolclass);
      if (position > -1) {
        $scope.selection.splice(position, 1);
      } else {
        $scope.selection.push(schoolclass);
      }
      if (indexOf.call($scope.selection, "") >= 0 && $scope.selection.length > 1) {
        return notify.warning(gettext("It's not possible to print all users and a class at the same time."));
      }
    };
    $scope.sort_schoolclasses = function(schoolclasses) {
      schoolclasses.sort(function(a, b) {
        var anum, bnum;
        anum = parseInt(a, 10);
        bnum = parseInt(b, 10);
        if (anum > bnum) {
          return 1;
        }
        if (anum < bnum) {
          return -1;
        }
        return 0;
      });
      return schoolclasses;
    };
    $scope.getGroups = function(username) {
      var classname, i, len, membership, ref;
      if ($scope.identity.user === 'root' || $scope.identity.profile.sophomorixRole === 'globaladministrator' || $scope.identity.profile.sophomorixRole === 'schooladministrator') {
        return $http.get('/api/lmn/users/classes').then(function(resp) {
          $scope.classes = $scope.sort_schoolclasses(resp.data);
          return $scope.admin_warning = true;
        });
      } else {
        $scope.admin_warning = false;
        $scope.classes = [];
        ref = $scope.identity.profile.memberOf;
        for (i = 0, len = ref.length; i < len; i++) {
          membership = ref[i];
          if (membership.indexOf("OU=Students") > -1) {
            // Split "CN=10b,OU=10b,OU=Students,..."
            classname = membership.split(',')[0].split('=')[1];
            $scope.classes.push(classname);
          }
        }
        return $scope.classes = $scope.sort_schoolclasses($scope.classes);
      }
    };
    return $scope.$watch('identity.user', function() {
      if ($scope.identity.user === void 0) {
        return;
      }
      if ($scope.identity.user === null) {
        return;
      }
      if ($scope.identity.user === 'root') {
        return;
      }
      $scope.adminClass = $scope.identity.profile.sophomorixAdminClass;
      return $http.get("/api/lmn/activeschool").then(function(resp) {
        $scope.identity.profile.activeSchool = resp.data;
        $scope.getGroups($scope.identity.user);
      });
    });
  });

}).call(this);

// Generated by CoffeeScript 2.5.1
(function() {
  angular.module('lmn.users').controller('LMUsersCheckResultsModalController', function($scope, $uibModalInstance, $uibModal, data, gettext) {
    $scope.data = data;
    $scope._ = {
      doAdd: data['SUMMARY'][1]['ADD']['RESULT'] > 0,
      doMove: data['SUMMARY'][2]['UPDATE']['RESULT'] > 0,
      doKill: data['SUMMARY'][3]['KILL']['RESULT'] > 0
    };
    $scope.tab_selected = "all";
    $scope.tab_selected_text = {
      "all": gettext('Apply'),
      "add": gettext('Add user(s)'),
      "move": gettext('Move user(s)'),
      "kill": gettext('Kill user(s)'),
      "error": gettext('Errors')
    };
    $scope.select = function(tab) {
      return $scope.tab_selected = tab;
    };
    //# Use same string status for, e.g., Removable and Killable ?
    $scope.user_status = {
      'U': 'Usable (U)',
      'A': 'Activated (A)',
      'E': 'Enabled (E)',
      'S': 'Self-activated (S)',
      'P': 'Permanent (P)',
      'T': 'Tolerated (T)',
      'L': 'Locked (L)',
      'D': 'Deactivated (D)',
      'F': 'Frozen (F)',
      'R': 'Removable (R)',
      'K': 'Killable (K)',
      'X': 'Exam (X)',
      'M': 'Managed (M)'
    };
    $scope.status_filter = function(status) {
      if ($scope.user_status[status] === void 0) {
        return status;
      } else {
        return $scope.user_status[status];
      }
    };
    $scope.apply = function(mode) {
      var msg;
      if (mode === "add") {
        $scope._ = {
          doAdd: true,
          doMove: false,
          doKill: false
        };
      }
      if (mode === "move") {
        $scope._ = {
          doAdd: false,
          doMove: true,
          doKill: false
        };
      }
      if (mode === "kill") {
        $scope._ = {
          doAdd: false,
          doMove: false,
          doKill: true
        };
      }
      $uibModalInstance.close();
      msg = $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/apply.modal.html',
        controller: 'LMUsersApplyModalController',
        backdrop: 'static',
        size: 'lg',
        resolve: {
          params: function() {
            return $scope._;
          }
        }
      });
      return $uibModalInstance.close();
    };
    return $scope.cancel = function() {
      return $uibModalInstance.dismiss();
    };
  });

  angular.module('lmn.users').controller('LMUsersApplyModalController', function($scope, $uibModalInstance, $http, $route, gettext, notify, params) {
    $scope.options = {
      autoscroll: true
    };
    $scope.close = function() {
      return $uibModalInstance.close();
    };
    $scope.isWorking = true;
    return $http.post('/api/lmn/users/lists/apply', params).then(function(resp) {
      $scope.isWorking = false;
      notify.success(gettext('Changes applied'));
      return $route.reload();
    }).catch(function(resp) {
      $scope.isWorking = false;
      return notify.error(gettext('Failed'), resp.data.message);
    });
  });

  angular.module('lmn.users').controller('LMUsersCheckModalController', function($scope, $http, notify, $uibModalInstance, $uibModal, gettext) {
    $scope.isWorking = true;
    $http.get('/api/lmn/users/lists/check').then(function(resp) {
      if (!resp.data) {
        notify.error(gettext('Unknown error!'), gettext('Please run sophomorix-check manually to identity the reason.'));
        $uibModalInstance.close();
        return;
      }
      if (resp.data["OUTPUT"][0]["TYPE"] === "ERROR") {
        notify.error(resp.data["OUTPUT"][0]["MESSAGE_EN"]);
        $scope.error = true;
        $scope.isWorking = false;
        $uibModalInstance.close();
        return;
      }
      if (resp.data["CHECK_RESULT"]["ERRORLIST"].length > 0) {
        notify.error(gettext('Check failed'));
        $scope.isWorking = false;
        $scope.error = true;
        return $scope.errorList = resp.data["CHECK_RESULT"]['ERROR'];
      } else {
        $scope.showCheckResults(resp.data);
        return $uibModalInstance.close();
      }
    }).catch(function(resp) {
      $scope.isWorking = false;
      $scope.error = true;
      return notify.error(gettext('Check failed'), resp.data.message);
    });
    $scope.showCheckResults = function(data) {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/result.modal.html',
        controller: 'LMUsersCheckResultsModalController',
        resolve: {
          data: function() {
            return data;
          }
        }
      });
    };
    return $scope.close = function() {
      return $uibModalInstance.close();
    };
  });

}).call(this);

// Generated by CoffeeScript 2.5.1
(function() {
  angular.module('lmn.users').controller('LMNUsersShowPasswordController', function($scope, $uibModal, $uibModalInstance, $http, gettext, notify, messagebox, pageTitle, username) {
    $scope.username = username;
    $http.get('/api/lmn/users/passwords/' + $scope.username).then(function(resp) {
      $scope.password = resp.data;
      return $http.get(`/api/lmn/users/${$scope.username}/first-password-set`).then(function(response) {
        if (response.data === true) {
          $scope.passwordStatus = gettext('Still Set');
          return $scope.passwordStatusColor = 'green';
        } else {
          $scope.passwordStatus = gettext('Changed from user');
          return $scope.passwordStatusColor = 'red';
        }
      });
    });
    return $scope.close = function() {
      return $uibModalInstance.close();
    };
  });

  angular.module('lmn.users').controller('LMNUsersCustomPasswordController', function($scope, $uibModal, $uibModalInstance, $http, gettext, notify, messagebox, pageTitle, users, pwtype, validation) {
    $scope.users = users;
    // Single user
    if (!Array.isArray(users)) {
      $scope.users = [users];
    }
    $scope.pwtype = pwtype === 'current' ? pwtype : 'first';
    $scope.userpw = "";
    $scope.save = function() {
      var test, usernames;
      if (!$scope.userpw) {
        notify.error(gettext("You have to enter a password"));
        return;
      }
      test = validation.isValidPassword($scope.userpw);
      if (test !== true) {
        notify.error(gettext(test));
        return;
      } else {
        usernames = $scope.users.flatMap((x) => {
          return x.sAMAccountName;
        }).join(',').trim();
        $http.post(`/api/lmn/users/passwords/set-${$scope.pwtype}`, {
          users: usernames,
          password: $scope.userpw
        }).then(function(resp) {
          return notify.success(gettext('New password set'));
        });
      }
      return $scope.close();
    };
    return $scope.close = function() {
      return $uibModalInstance.close();
    };
  });

  angular.module('lmn.users').controller('LMNUserDetailsController', function($scope, $route, $uibModal, $uibModalInstance, $http, gettext, notify, messagebox, pageTitle, id, role, identity, customFields) {
    var custom_fields_role;
    //notify.error gettext("You have to enter a username")
    $scope.id = id;
    $scope.showGroupDetails = true;
    $scope.showQuotaDetails = true;
    $scope.nevertext = gettext('Never');
    $scope.custom_column = false;
    if (role === 'schooladmins') {
      custom_fields_role = 'schooladministrators';
    } else if (role === 'globaladmins') {
      custom_fields_role = 'globaladministrators';
    } else {
      custom_fields_role = role;
    }
    identity.promise.then(function() {
      if (identity.profile.isAdmin || identity.user === 'root') {
        return customFields.load_config(custom_fields_role).then(function(resp) {
          var custom, ref, ref1, results, values;
          $scope.custom = resp.custom;
          $scope.customMulti = resp.customMulti;
          $scope.proxyAddresses = resp.proxyAddresses;
          // Is there a custom field to show ?
          if ($scope.proxyAddresses.show) {
            $scope.custom_column = true;
          }
          if (!$scope.custom_column) {
            ref = $scope.custom;
            for (custom in ref) {
              values = ref[custom];
              if (values.show) {
                $scope.custom_column = true;
                break;
              }
            }
          }
          if (!$scope.custom_column) {
            ref1 = $scope.customMulti;
            results = [];
            for (custom in ref1) {
              values = ref1[custom];
              if (values.show) {
                $scope.custom_column = true;
                break;
              } else {
                results.push(void 0);
              }
            }
            return results;
          }
        });
      }
    });
    $scope.formatDate = function(date) {
      var day, hour, min, month, sec, year;
      if (date === "19700101000000.0Z") {
        return $scope.nevertext;
      } else if (date === void 0) {
        return "undefined";
      } else {
        // Sophomorix date format is yyyyMMddhhmmss.0Z
        year = date.slice(0, 4);
        month = +date.slice(4, 6) - 1; // Month start at 0
        day = date.slice(6, 8);
        hour = date.slice(8, 10);
        min = date.slice(10, 12);
        sec = date.slice(12, 14);
        return new Date(year, month, day, hour, min, sec);
      }
    };
    $scope.hidetext = gettext("Hide");
    $scope.showtext = gettext("Show");
    $http.get(`/api/lmn/sophomorixUsers/${role}/${id}`).then(function(resp) {
      var category, cn, dn, j, len, ref, results;
      $scope.userDetails = resp.data[0];
      $scope.groups = [];
      ref = $scope.userDetails['memberOf'];
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        dn = ref[j];
        cn = dn.split(',')[0].split('=')[1];
        category = dn.split(',')[1].split('=')[1];
        results.push($scope.groups.push({
          'cn': cn,
          'category': category
        }));
      }
      return results;
    });
    $http.get(`/api/lmn/quota/user/${id}`).then(function(resp) {
      var ref, results, share, total, type, usage, used, values;
      $scope.quotas = [];
      ref = resp.data['QUOTA_USAGE_BY_SHARE'];
      results = [];
      for (share in ref) {
        values = ref[share];
        // default-school and linuxmuster-global both needed ?
        // cloudquota and mailquota not in QUOTA_USAGE_BY_SHARE ?
        used = values['USED_MiB'];
        total = values['HARD_LIMIT_MiB'];
        if (typeof total === 'string') {
          if (total === 'NO LIMIT') {
            total = gettext('NO LIMIT');
          }
          results.push($scope.quotas.push({
            'share': share,
            'total': gettext(total),
            'used': used,
            'usage': 0,
            'type': "success"
          }));
        } else {
          usage = Math.floor((100 * used) / total);
          if (usage < 60) {
            type = "success";
          } else if (usage < 80) {
            type = "warning";
          } else {
            type = "danger";
          }
          results.push($scope.quotas.push({
            'share': share,
            'total': total + " MiB",
            'used': used,
            'usage': usage,
            'type': type
          }));
        }
      }
      return results;
    });
    $scope.editCustom = function(index) {
      var value;
      value = $scope.userDetails['sophomorixCustom' + index];
      return customFields.editCustom($scope.id, value, index).then(function(resp) {
        return $scope.userDetails['sophomorixCustom' + index] = resp;
      });
    };
    $scope.removeCustomMulti = function(index, value) {
      return customFields.removeCustomMulti($scope.id, value, index).then(function() {
        var position;
        position = $scope.userDetails['sophomorixCustomMulti' + index].indexOf(value);
        return $scope.userDetails['sophomorixCustomMulti' + index].splice(position, 1);
      });
    };
    $scope.addCustomMulti = function(index) {
      return customFields.addCustomMulti($scope.id, index).then(function(resp) {
        if (resp) {
          return $scope.userDetails['sophomorixCustomMulti' + index].push(resp);
        }
      });
    };
    $scope.removeProxyAddresses = function(value) {
      return customFields.removeProxyAddresses($scope.id, value).then(function() {
        var position;
        position = $scope.userDetails['proxyAddresses'].indexOf(value);
        return $scope.userDetails['proxyAddresses'].splice(position, 1);
      });
    };
    $scope.addProxyAddresses = function() {
      return customFields.addProxyAddresses($scope.id).then(function(resp) {
        if (resp) {
          return $scope.userDetails['proxyAddresses'].push(resp);
        }
      });
    };
    return $scope.close = function() {
      return $uibModalInstance.dismiss();
    };
  });

  angular.module('lmn.users').controller('LMUsersSortListModalController', function($scope, $window, $http, $uibModalInstance, messagebox, notify, $uibModal, gettext, filesystem, userlist, userListCSV) {
    $scope.userListCSV = userListCSV;
    $scope.userlist = userlist;
    $scope.rebuildCSV = function() {
      var element, i, j, len, ref, results;
      // add empty 'not used' fields if CSV contains more columns than fields
      while ($scope['userListCSV'].length > $scope['coloumnTitles'].length) {
        $scope['coloumnTitles'].push({
          name: gettext('not used')
        });
      }
      i = 0;
      ref = $scope.userListCSV;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        element = ref[j];
        element.coloumn = $scope.coloumnTitles[i]['id'];
        results.push(i = i + 1);
      }
      return results;
    };
    //console.log ($scope['userListCSV'])
    $scope.togglecustomField = function(field) {
      var pos;
      // get index of field in columnTitles (-1 if not present)
      pos = $scope.coloumnTitles.map(function(e) {
        return e.name;
      }).indexOf(field);
      // add field if not presend
      if (pos === -1) {
        $scope.coloumnTitles.splice(4, 0, {
          name: field,
          id: field
        });
      } else {
        // splice this field 
        $scope.coloumnTitles.splice(pos, 1);
      }
      return $scope.rebuildCSV();
    };
    $scope.accept = function() {
      //console.log ($scope.userListCSV)
      return $uibModalInstance.close($scope.userListCSV);
    };
    $scope.close = function() {
      return $uibModalInstance.dismiss();
    };
    if (userlist === 'students.csv') {
      $scope.coloumnTitles = [
        {
          name: gettext('class'),
          id: 'class'
        },
        {
          name: gettext('lastname'),
          id: 'lastname'
        },
        {
          name: gettext('firstname'),
          id: 'firstname'
        },
        {
          name: gettext('birthday'),
          id: 'birthday'
        }
      ];
    }
    if (userlist === 'teachers.csv') {
      $scope.coloumnTitles = [
        {
          name: gettext('lastname'),
          id: 'lastname'
        },
        {
          name: gettext('firstname'),
          id: 'firstname'
        },
        {
          name: gettext('birthday'),
          id: 'birthday'
        },
        {
          name: gettext('login'),
          id: 'login'
        }
      ];
    }
    return $scope.rebuildCSV();
  });

  angular.module('lmn.users').controller('LMUsersUploadModalController', function($scope, $window, $http, $uibModalInstance, messagebox, notify, $uibModal, gettext, filesystem, role, parent) {
    $scope.path = "/tmp/";
    $scope.parent = parent;
    $scope.role = role;
    $scope.csv_name = `${role}.csv`;
    $scope.upload = function($flow, check = true) {
      var msg;
      $uibModalInstance.close();
      msg = messagebox.show({
        progress: true
      });
      return filesystem.startFlowUpload($flow, $scope.path).then(function() {
        var filename;
        notify.success(gettext('Uploaded'));
        filename = $flow["files"][0]["name"];
        if (check) {
          $scope.checkColumns(filename);
        } else {
          $scope.saveCSV(filename);
        }
        return msg.close();
      }, null, function(progress) {
        return msg.messagebox.title = `Uploading: ${Math.floor(100 * progress)}%`;
      });
    };
    $scope.checkColumns = function(filename) {
      return $http.post('/api/lmn/users/lists/import', {
        action: 'get',
        path: $scope.path + filename,
        userlist: $scope.csv_name
      }).then(function(resp) {
        var userListCSV;
        userListCSV = resp.data;
        return $uibModal.open({
          templateUrl: '/lmn_users:resources/partial/sortList.modal.html',
          controller: 'LMUsersSortListModalController',
          resolve: {
            userListCSV: function() {
              return userListCSV;
            },
            userlist: function() {
              return $scope.csv_name;
            }
          }
        }).result.then(function(result) {
          return $http.post("/api/lmn/users/lists/import", {
            action: 'save',
            data: result,
            userlist: $scope.csv_name
          }).then(function(resp) {
            //console.log (resp['data'])
            if (resp['data'][0] === 'ERROR') {
              notify.error(resp['data'][1]);
            }
            if (resp['data'][0] === 'LOG') {
              $scope.parent[`get${$scope.role}`]({
                force: true
              });
              notify.success(gettext(resp['data'][1]));
              return notify.success(gettext('Saved'));
            }
          });
        });
      });
    };
    $scope.saveCSV = function(filename) {
      return $http.post('/api/lmn/users/lists/csv', {
        tmp_path: $scope.path + filename,
        userlist: $scope.csv_name
      }).then(function(resp) {
        if (resp['data'][0] === 'ERROR') {
          notify.error(resp['data'][1]);
        }
        if (resp['data'][0] === 'LOG') {
          $scope.parent[`get${$scope.role}`]({
            force: true
          });
          notify.success(gettext(resp['data'][1]));
          return notify.success(gettext('Saved'));
        }
      });
    };
    return $scope.close = function() {
      return $uibModalInstance.close();
    };
  });

  angular.module('lmn.users').controller('LMNUsersAddAdminController', function($scope, $route, $uibModal, $uibModalInstance, $http, gettext, notify, messagebox, pageTitle, role) {
    $scope.role = role;
    $scope.save = function(username) {
      if (!$scope.username) {
        notify.error(gettext("You have to enter a username"));
      } else {
        notify.success(gettext('Adding administrator...'));
        $http.post(`/api/lmn/sophomorixUsers/${role}s`, {
          users: username
        }).then(function(resp) {
          // console.log (resp.data)
          if (resp['data'][0] === 'ERROR') {
            notify.error(resp['data'][1]);
          }
          if (resp['data'][0] === 'LOG') {
            notify.success(gettext(resp['data'][1]));
          }
          return $route.reload();
        });
        return $uibModalInstance.dismiss();
      }
    };
    return $scope.close = function() {
      return $uibModalInstance.dismiss();
    };
  });

}).call(this);

// Generated by CoffeeScript 2.5.1
(function() {
  angular.module('lmn.users').config(function($routeProvider) {
    return $routeProvider.when('/view/lmn/users/listmanagement', {
      controller: 'LMUsersListManagementController',
      templateUrl: '/lmn_users:resources/partial/listmanagement.html'
    });
  });

  angular.module('lmn.users').controller('LMUsersListManagementController', function($scope, $http, $location, $route, $uibModal, gettext, hotkeys, notify, lmEncodingMap, messagebox, pageTitle, lmFileEditor, lmFileBackups, filesystem, validation) {
    pageTitle.set(gettext('Listmanagement'));
    $scope.activeTab = 0;
    $scope.tabs = ['students', 'teachers', 'extrastudents'];
    $scope.students_sorts = [
      {
        name: gettext('Class'),
        fx: function(x) {
          return x.class;
        }
      },
      {
        name: gettext('First name'),
        fx: function(x) {
          return x.first_name;
        }
      },
      {
        name: gettext('Last name'),
        fx: function(x) {
          return x.last_name;
        }
      },
      {
        name: gettext('Birthday'),
        fx: function(x) {
          return x.birthday;
        }
      },
      {
        name: gettext('Student ID'),
        fx: function(x) {
          return x.id;
        }
      }
    ];
    $scope.teachers_sorts = [
      {
        name: gettext('Login'),
        fx: function(x) {
          return x.login;
        }
      },
      {
        name: gettext('First name'),
        fx: function(x) {
          return x.first_name;
        }
      },
      {
        name: gettext('Last name'),
        fx: function(x) {
          return x.last_name;
        }
      },
      {
        name: gettext('Login'),
        fx: function(x) {
          return x.login;
        }
      }
    ];
    $scope.extrastudents_sorts = [
      {
        name: gettext('Class'),
        fx: function(x) {
          return x.class;
        }
      },
      {
        name: gettext('First name'),
        fx: function(x) {
          return x.first_name;
        }
      },
      {
        name: gettext('Last name'),
        fx: function(x) {
          return x.last_name;
        }
      },
      {
        name: gettext('Birthday'),
        fx: function(x) {
          return x.birthday;
        }
      },
      {
        name: gettext('Login'),
        fx: function(x) {
          return x.login;
        }
      }
    ];
    $scope.courses_sorts = [
      {
        name: gettext('Course'),
        fx: function(x) {
          return x.course;
        }
      },
      {
        name: gettext('Base name'),
        fx: function(x) {
          return x.base_name;
        }
      },
      {
        name: gettext('Birthday'),
        fx: function(x) {
          return x.birthday;
        }
      },
      {
        name: gettext('Count'),
        fx: function(x) {
          return x.count;
        }
      },
      {
        name: gettext('GECOS'),
        fx: function(x) {
          return x.gecos;
        }
      }
    ];
    $scope.students_sort = $scope.students_sorts[0];
    $scope.teachers_sort = $scope.teachers_sorts[0];
    $scope.extrastudents_sort = $scope.students_sorts[0];
    $scope.courses_sort = $scope.teachers_sorts[0];
    $scope.paging = {
      page_students: 1,
      page_teachers: 1,
      page_extrastudents: 1,
      page_courses: 1,
      pageSize: 50
    };
    $scope.students_fields = {
      class: {
        visible: true,
        name: gettext('Class')
      },
      last_name: {
        visible: true,
        name: gettext('Last Name')
      },
      first_name: {
        visible: true,
        name: gettext('First Name')
      },
      birthday: {
        visible: true,
        name: gettext('Birthday')
      },
      id: {
        visible: false,
        name: gettext('Student ID')
      }
    };
    $scope.teachers_fields = {
      last_name: {
        visible: true,
        name: gettext('Last Name')
      },
      first_name: {
        visible: true,
        name: gettext('First Name')
      },
      birthday: {
        visible: true,
        name: gettext('Birthday')
      },
      password: {
        visible: false,
        name: gettext('Desired Password')
      },
      login: {
        visible: true,
        name: gettext('Login')
      }
    };
    $scope.extrastudents_fields = {
      class: {
        visible: true,
        name: gettext('Class')
      },
      last_name: {
        visible: true,
        name: gettext('Last Name')
      },
      first_name: {
        visible: true,
        name: gettext('First Name')
      },
      birthday: {
        visible: true,
        name: gettext('Birthday')
      },
      login: {
        visible: true,
        name: gettext('Login')
      }
    };
    $scope.teachers_first_save = false;
    $scope.students_first_save = false;
    $scope.extrastudents_first_save = false;
    $scope.courses_first_save = false;
    $scope.teachers = '';
    $scope.students = '';
    $scope.extrastudents = '';
    $scope.courses = '';
    $scope.students_add = function() {
      if ($scope.students.length > 0) {
        $scope.paging.page_students = Math.floor(($scope.students.length - 1) / $scope.paging.pageSize) + 1;
      }
      $scope.students_filter = '';
      return $scope.students.push({
        '_isNew': true,
        'first_name': '',
        'last_name': '',
        'class': ''
      });
    };
    $scope.teachers_add = function() {
      if ($scope.teachers.length > 0) {
        $scope.paging.page_teachers = Math.floor(($scope.teachers.length - 1) / $scope.paging.pageSize) + 1;
      }
      $scope.teachers_filter = '';
      return $scope.teachers.push({
        class: 'Lehrer',
        _isNew: true
      });
    };
    $scope.extrastudents_add = function() {
      if ($scope.extrastudents.length > 0) {
        $scope.paging.page_extrastudents = Math.floor(($scope.extrastudents.length - 1) / $scope.paging.pageSize) + 1;
      }
      $scope.extrastudents_filter = '';
      return $scope.extrastudents.push({
        _isNew: true
      });
    };
    $scope.courses_add = function() {
      if ($scope.courses.length > 0) {
        $scope.paging.page_courses = Math.floor(($scope.courses.length - 1) / $scope.paging.pageSize) + 1;
      }
      $scope.courses_filter = '';
      return $scope.courses.push({
        _isNew: true
      });
    };
    $scope.cleanupEmptyRow = function(index, tab) {
      var key, results;
      // Cleanup removed empty cells from $scope.emptyCells
      index = ($scope.paging["page_" + tab] - 1) * $scope.paging.pageSize + 1 + parseInt(index, 10);
      results = [];
      for (key in $scope.emptyCells) {
        if (key.endsWith('-' + index)) {
          results.push(delete $scope.emptyCells[key]);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    $scope.students_remove = function(student, index) {
      if (student._isNew) {
        $scope.cleanupEmptyRow(index, "students");
      }
      return $scope.students.remove(student);
    };
    $scope.teachers_remove = function(teacher, index) {
      if (teacher._isNew) {
        $scope.cleanupEmptyRow(index, "teachers");
      }
      return $scope.teachers.remove(teacher);
    };
    $scope.extrastudents_remove = function(student, index) {
      if (student._isNew) {
        $scope.cleanupEmptyRow(index, "extrastudents");
      }
      return $scope.extrastudents.remove(student);
    };
    $scope.courses_remove = function(course, index) {
      if (course._isNew) {
        $scope.cleanupEmptyRow(index, "courses");
      }
      return $scope.courses.remove(course);
    };
    $scope.getstudents = function(force = false) {
      if (!$scope.students || force) {
        return $http.get("/api/lmn/users/lists/students").then(function(resp) {
          return $scope.students = resp.data;
        });
      }
    };
    $scope.getteachers = function(force = false) {
      if (!$scope.teachers || force) {
        return $http.get("/api/lmn/users/lists/teachers").then(function(resp) {
          return $scope.teachers = resp.data;
        });
      }
    };
    $scope.getextrastudents = function(force = false) {
      if (!$scope.extrastudents || force) {
        return $http.get("/api/lmn/users/lists/extrastudents").then(function(resp) {
          return $scope.extrastudents = resp.data;
        });
      }
    };
    $scope.getcourses = function(force = false) {
      if (!$scope.courses || force) {
        return $http.get('/api/lmn/schoolsettings').then(function(resp) {
          $scope.courses_encoding = lmEncodingMap[resp.data.encoding_courses_extra] || 'ISO8859-1';
          return $http.get(`/api/lmn/users/lists/extraclasses?encoding=${$scope.courses_encoding}`).then(function(resp) {
            return $scope.courses = resp.data;
          });
        });
      }
    };
    $scope.editCSV = function(role) {
      return lmFileEditor.show(`${$scope.configpath}${role}.csv`, '').then(function() {
        return $route.reload();
      });
    };
    $scope.students_save = function() {
      if ($scope.numErrors()) {
        $scope.students_first_save = true;
        $scope.show_errors = true;
        angular.element(document.getElementsByClassName("has-error-new")).addClass('has-error');
        notify.error(gettext('Please check the errors.'));
        return;
      }
      $scope.show_errors = false;
      $scope.students_first_save = false;
      return $http.post(`/api/lmn/users/lists/students?encoding=${$scope.students_encoding}`, $scope.students).then(function() {
        return notify.success(gettext('Saved'));
      });
    };
    $scope.teachers_save = function() {
      if ($scope.numErrors()) {
        $scope.teachers_first_save = true;
        $scope.show_errors = true;
        angular.element(document.getElementsByClassName("has-error-new")).addClass('has-error');
        notify.error(gettext('Please check the errors.'));
        return;
      }
      $scope.show_errors = false;
      $scope.teachers_first_save = false;
      return $http.post(`/api/lmn/users/lists/teachers?encoding=${$scope.teachers_encoding}`, $scope.teachers).then(function() {
        return notify.success(gettext('Saved'));
      });
    };
    $scope.extrastudents_save = function() {
      if ($scope.numErrors()) {
        $scope.extrastudents_first_save = true;
        $scope.show_errors = true;
        angular.element(document.getElementsByClassName("has-error-new")).addClass('has-error');
        notify.error(gettext('Please check the errors.'));
        return;
      }
      $scope.show_errors = false;
      $scope.extrastudents_first_save = false;
      return $http.post(`/api/lmn/users/lists/extrastudents?encoding=${$scope.extrastudents_encoding}`, $scope.extrastudents).then(function() {
        return notify.success(gettext('Saved'));
      });
    };
    $scope.courses_save = function() {
      if ($scope.numErrors()) {
        $scope.courses_first_save = true;
        $scope.show_errors = true;
        angular.element(document.getElementsByClassName("has-error-new")).addClass('has-error');
        notify.error(gettext('Please check the errors.'));
        return;
      }
      $scope.show_errors = false;
      $scope.courses_first_save = false;
      return $http.post(`/api/lmn/users/lists/extraclasses?encoding=${$scope.courses_encoding}`, $scope.courses).then(function() {
        return notify.success(gettext('Saved'));
      });
    };
    $scope.confirmUpload = function(role) {
      return $uibModal.open({
        templateUrl: '/lmn_users:resources/partial/upload.modal.html',
        controller: 'LMUsersUploadModalController',
        backdrop: 'static',
        resolve: {
          role: function() {
            return role;
          },
          parent: function() {
            return $scope;
          }
        }
      });
    };
    $scope.backups = function(role) {
      return lmFileBackups.show(`${$scope.configpath}${role}.csv`, '');
    };
    // general functions
    $scope.error_msg = {};
    $scope.show_errors = false;
    $scope.emptyCells = {};
    $scope.dictLen = function(d) {
      return Object.keys(d).length;
    };
    $scope.validateField = function(name, val, isnew, ev, tab, filter = null) {
      var errorClass, schoolclasses_tmp, test;
      // TODO : what valid chars for class, name and course ?
      // Temporary solution : not filter these fields
      if ($scope[tab + "_first_save"]) {
        errorClass = "has-error-new has-error";
      } else {
        errorClass = "has-error-new";
      }
      ev = ($scope.paging["page_" + tab] - 1) * $scope.paging.pageSize + 1 + parseInt(ev, 10);
      if (name.startsWith('TODO')) {
        if (!val) {
          $scope.emptyCells[name + "-" + tab + "-" + ev] = 1;
          return errorClass;
        } else {
          delete $scope.emptyCells[name + "-" + tab + "-" + ev];
          return "";
        }
      }
      // TODO : is pasword necessary for extra course ? Filtered only if not undefined.
      // Desired passwords will be marked if not strong enough, is it necessary for extra courses ?
      if (name === 'Password' && !val) {
        return "";
      }
      test = validation["isValid" + name](val);
      // Ensure the login is not duplicated, but ignore empty login
      if (filter === 'teachers') {
        if (val !== '' && val !== void 0) {
          if (!($scope.teachers.filter(validation.findval('login', val)).length < 2)) {
            test = test && gettext("Duplicate teachers login");
          }
        }
      } else if (filter === 'extrastudents') {
        if (val !== '' && val !== void 0) {
          if (!($scope.extrastudents.filter(validation.findval('login', val)).length < 2)) {
            test = test && gettext("Duplicate extrastudents login");
          }
          // Test if login == schoolclass
          if (name === 'Login') {
            // Get all classes from extrastudents and students objects without duplicates
            schoolclasses_tmp = $scope.extrastudents.map(function(x) {
              return x.class;
            }).concat($scope.students.map(function(x) {
              return x.class;
            })).filter(function(v, i, a) {
              return a.indexOf(v) === i;
            });
            if (schoolclasses_tmp.indexOf(val) >= 0) {
              test = test && gettext("Conflict between login and class");
            }
          }
        }
      }
      // Login for teachers may be empty
      if (name === 'Login' && (filter === 'teachers' || filter === 'extrastudents') && test === true) {
        delete $scope.error_msg[name + "-" + tab + "-" + ev];
        delete $scope.emptyCells[name + "-" + tab + "-" + ev];
        return "";
      } else if (test === true && val) {
        delete $scope.error_msg[name + "-" + tab + "-" + ev];
        delete $scope.emptyCells[name + "-" + tab + "-" + ev];
        return "";
      } else if (!val) {
        delete $scope.error_msg[name + "-" + tab + "-" + ev];
        $scope.emptyCells[name + "-" + tab + "-" + ev] = 1;
      } else {
        delete $scope.emptyCells[name + "-" + tab + "-" + ev];
        if (Object.values($scope.error_msg).indexOf(gettext(tab) + ": " + test) === -1) {
          $scope.error_msg[name + "-" + tab + "-" + ev] = gettext(tab) + ": " + test;
        }
      }
      return errorClass;
    };
    $scope.numErrors = function() {
      angular.element(document.getElementsByClassName("has-error")).removeClass('has-error');
      return $scope.dictLen($scope.error_msg) + $scope.dictLen($scope.emptyCells) > 0;
    };
    $scope.saveAndCheck = function(name) {
      if ($scope.numErrors()) {
        $scope[name + "_first_save"] = true;
        $scope.show_errors = true;
        angular.element(document.getElementsByClassName("has-error-new")).addClass('has-error');
        notify.error(gettext('Please check the errors.'));
        return;
      }
      $scope.show_errors = false;
      return $scope[name + "_save"]().then(function() {
        return $uibModal.open({
          templateUrl: '/lmn_users:resources/partial/check.modal.html',
          controller: 'LMUsersCheckModalController',
          backdrop: 'static'
        });
      });
    };
    // pulling active school from backend
    $scope.$watch('identity.user', function() {
      if ($scope.identity.user === void 0) {
        return;
      }
      if ($scope.identity.user === null) {
        return;
      }
      if ($scope.identity.user === 'root') {
        return;
      }
      return $http.get("/api/lmn/activeschool").then(function(resp) {
        $scope.school = resp.data;
        if ($scope.school === "default-school") {
          return $scope.configpath = '/etc/linuxmuster/sophomorix/default-school/';
        } else {
          return $scope.configpath = `/etc/linuxmuster/sophomorix/${$scope.school}/${$scope.school}.`;
        }
      });
    });
    // Loading first tab
    $scope.getstudents();
    return hotkeys.on($scope, function(key, event) {
      var current_tab;
      current_tab = $scope.tabs[$scope.activeTab];
      if (key === 'I' && event.ctrlKey) {
        $scope.saveAndCheck(current_tab);
        return true;
      }
      if (key === 'S' && event.ctrlKey) {
        $scope[current_tab + "_save"]();
        return true;
      }
      if (key === 'B' && event.ctrlKey) {
        $scope.backups(current_tab);
        return true;
      }
      return false;
    });
  });

}).call(this);

'use strict';

angular.module('lmn.users').service('userPassword', function ($http, $uibModal, messagebox, notify, gettext) {
    var _this = this;

    this.showFirstPassword = function (_username) {
        return $uibModal.open({
            templateUrl: '/lmn_users:resources/partial/showPassword.modal.html',
            controller: 'LMNUsersShowPasswordController',
            keyboard: false,
            backdrop: false,
            resolve: {
                username: function username() {
                    return _username;
                }
            }
        }).result;
    };

    this.resetFirstPassword = function (userlist) {
        $http.post('/api/lmn/users/passwords/reset-first', { users: userlist }).then(function (resp) {
            notify.success(gettext('Initial password set'));
        });
    };

    this.setRandomFirstPassword = function (userlist) {
        $http.post('/api/lmn/users/passwords/set-random', { users: userlist }).then(function (resp) {
            notify.success(gettext('Random password set'));
        });
    };

    this.setCustomPassword = function (userlist, _pwtype) {
        // type may be 'first' or 'current'
        $uibModal.open({
            templateUrl: '/lmn_users:resources/partial/customPassword.modal.html',
            controller: 'LMNUsersCustomPasswordController',
            size: 'mg',
            resolve: {
                users: function users() {
                    return userlist;
                },
                pwtype: function pwtype() {
                    return _pwtype;
                }
            }
        });
    };

    this.batchPasswords = function (userlist, cmd) {
        usernames = userlist.flatMap(function (x) {
            return x.selected ? x.sAMAccountName : [];
        }).join(',').trim();
        users = userlist.filter(function (x) {
            return x.selected;
        });
        if (cmd == 'reset-first') {
            _this.resetFirstPassword(usernames);
        } else if (cmd == 'random-first') {
            _this.setRandomFirstPassword(usernames);
        } else if (cmd == 'custom-first') {
            _this.setCustomPassword(users, 'first');
        };
    };

    this.showBindPW = function (user) {
        messagebox.show({
            title: gettext('Show bind user password'),
            text: gettext("Do you really want to see this password ? It could be a security issue!"),
            positive: 'Show',
            negative: 'Cancel' }).then(function () {
            $http.get('/api/lmn/users/' + user.sAMAccountName + '/bindpassword').then(function (resp) {
                messagebox.show({ title: gettext('Show bind user password'), text: resp.data, positive: 'OK' });
            });
        });
    };

    this.printSelectedPasswords = function (userlist) {
        msg = messagebox.show({ progress: true });
        usernames = userlist.flatMap(function (x) {
            return x.selected ? x.sAMAccountName : [];
        }).join(',').trim();
        $http.post('/api/lmn/users/passwords/print', { users: usernames }).then(function (resp) {
            if (resp.data.startsWith('user-')) {
                notify.success(gettext("PDF with passwords successfully created"));
                location.href = '/api/lmn/users/passwords/download/' + resp.data;
            } else {
                notify.error(gettext("Could not create password pdf"));
            };
            msg.close();
        });
    };

    return this;
});


'use strict';

angular.module('lmn.common').service('customFields', function ($http, messagebox, gettext, notify) {
    var _this = this;

    this.customDisplayOptions = ['proxyAddresses', 'sophomorixCustom1', 'sophomorixCustom2', 'sophomorixCustom3', 'sophomorixCustom4', 'sophomorixCustom5', 'sophomorixCustomMulti1', 'sophomorixCustomMulti2', 'sophomorixCustomMulti3', 'sophomorixCustomMulti4', 'sophomorixCustomMulti5'];

    this.customLists = ['proxyAddresses', 'sophomorixCustomMulti1', 'sophomorixCustomMulti2', 'sophomorixCustomMulti3', 'sophomorixCustomMulti4', 'sophomorixCustomMulti5'];

    this.isListAttr = function (attr) {
        return _this.customLists.includes(attr);
    };

    this.load_display = function (role) {
        return $http.get('/api/lmn/config/customfields/' + role).then(function (response) {
            // Filter title per display
            config = {
                'customDisplay': response.data.customDisplay,
                'customTitle': ['', '', '', '']
            };
            var _arr = [1, 2, 3];
            for (var _i = 0; _i < _arr.length; _i++) {
                idx = _arr[_i];

                if (config['customDisplay'][idx] == 'proxyAddresses') {
                    config['customTitle'][idx] = response.data.proxyAddresses.title;
                } else {
                    position = (config['customDisplay'][idx] || '').slice(-1);
                    if (position == '') {
                        config['customTitle'][idx] = '';
                    } else if (_this.isListAttr(config['customDisplay'][idx])) {
                        config['customTitle'][idx] = response.data.customMulti[position].title || '';
                    } else {
                        config['customTitle'][idx] = response.data.custom[position].title || '';
                    }
                }
            }
            return config;
        });
    };

    this.load_config = function () {
        var role = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        return $http.get('/api/lmn/config/customfields/' + role).then(function (response) {
            return response.data;
        });
    };

    this.load_user_fields = function (user) {
        return $http.get('/api/lmn/users/' + user + '/customfields').then(function (response) {
            return response.data;
        });
    };

    this.save = function (config) {
        return $http.post("/api/lmn/config/customfields", { 'config': config });
    };

    this.editCustom = function (user, value, index) {
        return messagebox.prompt(gettext('New value'), value).then(function (msg) {
            return $http.post('/api/lmn/users/' + user + '/custom/' + index, { value: msg.value }).then(function () {
                notify.success(gettext("Value updated !"));
                return msg.value || 'null';
            }, function () {
                return notify.error(gettext("Error, please verify the user and/or your values."));
            });
        });
    };

    this.removeCustomMulti = function (user, value, index) {
        return messagebox.show({
            title: gettext('Remove custom field value'),
            text: gettext('Do you really want to remove ') + value + ' ?',
            positive: gettext('OK'),
            negative: gettext('Cancel')
        }).then(function (msg) {
            return $http.patch('/api/lmn/users/' + user + '/custommulti/' + index, { 'value': value }).then(function () {
                notify.success(gettext("Value removed !"));
            });
        }, function () {
            notify.error(gettext("Error, please verify the user and/or your values."));
        });
    };

    this.addCustomMulti = function (user, index) {
        return messagebox.prompt(gettext('New value')).then(function (msg) {
            return $http.post('/api/lmn/users/' + user + '/custommulti/' + index, { 'value': msg.value }).then(function () {
                notify.success(gettext("Value added !"));
                return msg.value;
            }, function () {
                notify.error(gettext("Error, please verify the user and/or your values."));
            });
        });
    };

    this.removeProxyAddresses = function (user, value) {
        return messagebox.show({
            title: gettext('Remove proxy address'),
            text: gettext('Do you really want to remove ') + value + ' ?',
            positive: gettext('OK'),
            negative: gettext('Cancel')
        }).then(function (msg) {
            return $http.patch('/api/lmn/users/' + user + '/proxyaddresses', { address: value }).then(function () {
                notify.success(gettext("Value removed !"));
            }, function () {
                notify.error(gettext("Error, please verify the user and/or your values."));
            });
        });
    };

    this.addProxyAddresses = function (user) {
        return messagebox.prompt(gettext('New address')).then(function (msg) {
            return $http.post('/api/lmn/users/' + user + '/proxyaddresses', { address: msg.value }).then(function () {
                notify.success(gettext("Address added !"));
                return msg.value;
            }, function () {
                notify.error(gettext("Error, please verify the user and/or your values."));
            });
        });
    };

    return this;
});


